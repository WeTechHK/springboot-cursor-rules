# Cursor Rules 变更日志

> **文件说明**：本文档记录了 Cursor Rules 规范体系的版本变更历史，包括以下内容：
> - 版本变更记录（重大更新、功能优化、问题修复）
> - 新增功能说明（新规范、新模板、新工具）
> - 优化改进详情（性能优化、用户体验改进、代码质量提升）
> - 问题修复记录（Bug 修复、规范修正、文档更新）
> - 版本特性总结（每个版本的核心特性和改进点）
> - 升级指南（版本升级注意事项、迁移指南）
> 
> 开发团队可以通过此文档了解规范的演进历程，新成员可以了解当前版本的特性和改进点。

# Cursor Rules 变更日志

## [v3.0.0] - 2024-01-XX

### 重大更新 - 精简规则体系
- **规则体系重构**：从12个文件夹精简到4个核心文件，大幅降低学习成本
- **消除重复内容**：合并重复规则，统一规范标准
- **职责单一化**：每个文件职责清晰，避免内容混乱
- **AI友好设计**：优化规则结构，提高AI理解和执行效率
- **维护成本降低**：简化文件结构，便于团队维护和更新

### 新增功能
- **核心规则文件**：创建4个核心规范文件，覆盖最常用的开发场景
- **精简README**：提供清晰的使用指南和维护说明
- **统一代码模板**：保留最实用的代码模板

### 优化改进
- **学习成本降低**：从复杂的12文件夹结构简化为4个核心文件
- **开发效率提升**：AI能快速理解和执行精简后的规则
- **维护便利性**：规则结构清晰，易于更新和维护
- **团队协作改善**：统一的规范标准，减少理解偏差

### 删除内容
- **冗余文件夹**：删除01-项目约定、02-Spring-Boot指南、03-API设计等12个文件夹
- **重复规则**：消除文件间的重复内容和冲突规则
- **过度详细描述**：简化自然语言描述，直接提供规范指导

## [v2.4.0] - 2024-01-XX

### 重大更新
- **模块化设计**：将特定功能模块（审批流、消息队列等）标记为可选
- **技术栈分层**：区分核心技术栈和可选技术栈
- **配置模板优化**：将可选配置移到注释中，提供清晰的启用说明
- **目录结构简化**：明确标识哪些目录是必需的，哪些是可选的

## [v2.3.0] - 2024-01-XX

### 重大更新
- **自然语言描述增强**：为所有规范文件添加详细的自然语言描述和解释
- **理念和原理说明**：不仅告诉怎么做，更解释为什么这样做
- **最佳实践解释**：深入解释每个最佳实践背后的原理和优势
- **设计理念阐述**：从设计哲学角度解释技术选择的原因

## [v2.2.0] - 2024-01-XX

### 重大更新
- **全面通用化优化**：批量优化所有 34 个文件，完全去除 SCOP-CORE 项目特定内容
- **技术栈灵活性**：支持多种技术栈组合（MyBatis/JPA, MySQL/PostgreSQL等）
- **包名通用化**：使用占位符 `{company}.{project}` 替代具体包名
- **业务领域通用化**：去除特定业务领域描述，适用于各种企业级应用
- **类名通用化**：使用 `{Module}` 和 `{module}` 占位符替代具体业务类名
- **代码模板通用化**：所有代码模板使用占位符，便于项目定制化

## [v2.1.0] - 2024-01-XX

### 重大更新
- 新增核心 `.cursorrules` 配置文件，提供 Cursor AI 的核心上下文
- 新增团队协作指南，提升团队协作效率
- 新增性能监控指南，增强系统可观测性
- 新增 AI 交互模板库，标准化 AI 交互流程
- 基于 [awesome-cursor-rules-mdc](https://github.com/sanjeed5/awesome-cursor-rules-mdc) 项目最佳实践进行全面优化

## [v2.0.0] - 2024-01-XX

### 重大更新
- 基于 [awesome-cursor-rules-mdc](https://github.com/sanjeed5/awesome-cursor-rules-mdc) 项目最佳实践进行全面优化
- 重构目录结构，提升可读性和实用性
- 融入企业级开发最佳实践

### 新增功能
- **核心配置**：新增 `.cursorrules` 文件，提供 Cursor AI 的核心上下文
- **安全最佳实践**：新增 `08-best-practices/security-best-practices.md`
- **工具自动化**：新增 `09-tools-and-automation/git-hooks.md`
- **数据库规范**：新增 `10-数据库规范/` 目录，包含 MySQL 设计、MyBatis 使用和性能优化规范
- **RESTful 客户端集成**：新增 `03-API设计/restful-client-integration.md`，涵盖 HTTP 客户端、错误处理、重试机制等
- **外部服务集成**：新增 `05-服务层/external-service-integration.md`，包含服务发现、容错处理、监控等企业级特性
- **设计模式规范**：新增 `06-代码质量/design-patterns.md`，涵盖创建型、结构型、行为型模式在 Spring Boot 中的应用
- **设计模式最佳实践**：新增 `08-最佳实践/design-patterns-best-practices.md`，包含模式选择、实现技巧、常见陷阱等
- **设计模式代码模板**：新增 `代码模板/design-pattern-templates.md`，提供可直接使用的代码模板
- **增强的 AI 指南**：优化提示词结构和角色定义

### 优化改进
- **命名规范**：增加命名最佳实践说明
- **依赖注入**：强化构造器注入的优势说明，添加条件注入、@Lazy、@Qualifier 等高级特性
- **应用配置**：基于 Spring Boot 3.x 最佳实践优化配置管理，添加类型安全配置和配置验证
- **Spring Boot 3.x**：新增专门文件介绍 Spring Boot 3.x 新特性和最佳实践
- **AI 编程指南**：优化提示词模板，增加安全专家角色
- **项目介绍**：更新使用方式，强调 `.cursorrules` 的重要性
- **目录结构**：将所有子目录重命名为中文，便于理解和查看

### 技术栈更新
- 明确技术栈：Spring Boot 3.x + Spring Security + Spring Data JPA
- 强调企业级开发标准
- 增加安全考虑和性能要求

### 文件结构变化
```
cursor-rules/
├── .cursorrules                # 新增：核心 Cursor Rules 配置
├── 00-introduction.md          # 优化：更新使用方式和文件结构
├── 01-项目约定/                # 优化：增加命名最佳实践
├── 02-Spring-Boot指南/         # 优化：强化依赖注入说明
├── 03-API设计/                # 保持：API 设计规范
├── 04-领域建模/               # 保持：领域模型规范
├── 05-服务层/                 # 保持：服务层规范
├── 06-代码质量/               # 保持：代码质量规范
├── 07-AI编程指南/             # 优化：增强 AI 编程指南
├── 08-最佳实践/               # 新增：安全最佳实践
├── 09-工具自动化/             # 新增：工具和自动化
├── 10-数据库规范/             # 新增：数据库设计和使用规范
├── 代码模板/                  # 保持：代码模板
├── changelog.md               # 更新：记录变更
└── faq.md                     # 保持：常见问题
```

## [v1.0.0] - 2024-01-XX

### 新增
- 初始版本发布
- 完整的项目约定规范
- Spring Boot 开发指南
- API 设计规范
- 领域模型规范
- 服务层规范
- 代码质量规范
- AI 编程指南
- 代码模板库

### 功能特性
- **项目约定**：命名规范、目录结构、代码风格
- **Spring Boot 指南**：配置管理、Bean 管理、依赖注入
- **API 设计**：RESTful 规范、请求响应结构、参数验证
- **领域模型**：实体设计、Repository 模式、DTO 转换
- **服务层**：事务管理、异常处理、异步处理
- **代码质量**：日志记录、测试规范、性能优化
- **AI 编程**：提示词结构、输出格式、反模式避免、审查清单
- **代码模板**：Controller、Service、DTO、异常处理器模板

### 文档结构
```
cursor-rules/
├── 00-introduction.md           # 项目介绍
├── 01-project-conventions/      # 项目约定
├── 02-spring-boot-guidelines/   # Spring Boot 指南
├── 03-api-design/              # API 设计
├── 04-domain-modeling/         # 领域模型
├── 05-service-layer/           # 服务层
├── 06-code-quality/            # 代码质量
├── 07-ai-coding-guidelines/    # AI 编程指南
├── templates/                  # 代码模板
├── changelog.md                # 变更日志
└── faq.md                      # 常见问题
```

### 技术栈支持
- Java 21
- Spring Boot 3.x
- MyBatis
- MySQL
- Activiti
- RabbitMQ
- Redis
- Swagger/OpenAPI

### 适用场景
- 企业级 Spring Boot 应用开发
- 金融科技项目
- 微服务架构
- AI 辅助开发

---

## 版本说明

### 版本号规则
采用语义化版本号：`主版本号.次版本号.修订号`

- **主版本号**：不兼容的 API 修改
- **次版本号**：向下兼容的功能性新增
- **修订号**：向下兼容的问题修正

### 更新频率
- **主版本**：重大架构调整或技术栈升级
- **次版本**：新增功能模块或重要规范
- **修订版本**：bug 修复或文档完善

### 向后兼容性
- 主版本更新可能包含破坏性变更
- 次版本和修订版本保持向后兼容
- 废弃的功能会在下个主版本中移除

---

## 贡献指南

### 如何贡献
1. Fork 本仓库
2. 创建功能分支
3. 提交变更
4. 发起 Pull Request

### 贡献类型
- **文档完善**：补充缺失的规范说明
- **示例更新**：更新代码示例和模板
- **规范优化**：改进现有规范和最佳实践
- **问题修复**：修复文档中的错误或过时信息

### 提交规范
使用以下格式提交：
```
类型(范围): 简短描述

详细描述（可选）

相关 Issue: #123
```

类型包括：
- `feat`: 新功能
- `fix`: 修复问题
- `docs`: 文档更新
- `style`: 格式调整
- `refactor`: 重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

---

## 维护团队

### 核心维护者
- **架构师**：负责整体规范设计和重大决策
- **技术负责人**：负责具体规范的制定和更新
- **资深开发者**：负责最佳实践的总结和模板优化

### 社区贡献者
- 感谢所有为项目做出贡献的开发者
- 欢迎更多开发者参与项目维护

---

## 许可证

本项目采用 MIT 许可证，详见 [LICENSE](LICENSE) 文件。

---

## 联系方式

- **项目仓库**：https://github.com/your-org/cursor-rules
- **问题反馈**：https://github.com/your-org/cursor-rules/issues
- **讨论区**：https://github.com/your-org/cursor-rules/discussions

---

*最后更新时间：2024年1月*
*当前版本：v1.0.0*
