---
description: MySQL 数据库表结构设计规范，包括命名、字段、索引、主键、唯一键等设计标准
globs: **/src/main/resources/sql/*.sql
alwaysApply: true
---

# MySQL 表结构设计规范

## 表命名规范

### 基本规则
- 使用小写字母和下划线
- 表名以 `t_` 开头
- 表名使用复数形式
- 避免使用 MySQL 保留字
- 长度控制在 30 个字符以内

### 命名示例
```sql
-- 正确示例
t_user_accounts
t_order_items
t_product_categories
t_user_login_logs

-- 错误示例
user_accounts (缺少t_前缀)
UserAccount (大写)
userAccount (驼峰)
user (单数)
order (保留字)
```

## 字段设计规范

### 字段命名
- 使用小写字母和下划线
- 字段名要有意义，避免缩写
- 布尔字段使用 `is_` 前缀
- 时间字段使用 `_time` 后缀

### 字段类型选择
- **主键**：使用 `BIGINT AUTO_INCREMENT`
- **字符串**：根据长度选择 `VARCHAR`、`TEXT`、`LONGTEXT`
- **数值**：根据范围选择 `TINYINT`、`INT`、`BIGINT`、`DECIMAL`
- **布尔**：使用 `TINYINT` 表示
- **时间**：使用 `DATETIME` 类型

### 字段约束
- **非空约束**：业务必需字段使用 `NOT NULL`
- **默认值**：状态字段设置合理的默认值
- **唯一约束**：业务唯一字段使用 `UNIQUE`

## 主键设计

### 主键规则
- 每张表必须有主键
- 使用 `id` 作为主键字段名
- 类型为 `BIGINT AUTO_INCREMENT`
- 主键值无业务意义

## 唯一键设计

### 唯一键规则
- 业务唯一字段使用 `UNIQUE` 约束
- 复合唯一键使用 `UNIQUE KEY`
- 唯一键命名：`uk_` + 字段名

## 索引设计

### 索引命名规范
- 主键：`PRIMARY`
- 唯一索引：`uk_` + 字段名
- 普通索引：`idx_` + 字段名
- 复合索引：`idx_` + 字段名组合

### 索引设计原则
- 为查询频繁的字段添加索引
- 复合索引遵循最左前缀原则
- 关联字段必须添加索引
- 避免过多索引影响写入性能

## 表结构模板

### 标准表结构组成
- **主键**：`id BIGINT PRIMARY KEY AUTO_INCREMENT`
- **业务字段**：根据业务需求定义
- **审计字段**：必须包含 `create_time` 和 `update_time`
- **索引**：为查询字段和关联字段添加索引
- **表选项**：使用 `InnoDB` 引擎和 `utf8mb4` 字符集

## 关联字段设计

### 关联字段规则
- **不使用外键约束**，仅使用普通字段表示关联关系
- 名字和关联表字段一致
- 类型与关联表字段一致
- 添加普通索引提高查询性能
- 在应用层维护数据一致性

### 不使用外键的原因
- **性能考虑**：外键约束会影响插入、更新、删除性能
- **扩展性**：便于分库分表，避免跨库外键问题
- **灵活性**：应用层可以更灵活地处理数据一致性
- **维护性**：减少数据库层面的复杂约束管理

## 表设计最佳实践

### 1. 字段设计
- 避免使用 `SELECT *`，明确字段列表
- 合理选择字段长度，避免浪费空间
- 使用合适的数据类型
- 添加必要的注释

### 2. 索引优化
- 为经常查询的字段添加索引
- 避免过多索引影响写入性能
- 使用复合索引优化多条件查询
- 定期分析索引使用情况

### 3. 表结构优化
- 避免大表，考虑分表策略
- 合理使用分区
- 定期清理历史数据
- 监控表大小和性能

### 4. 数据一致性
- 在应用层维护关联数据的一致性
- 使用事务确保数据完整性
- 定期检查数据一致性
- 建立数据校验机制

### 5. 命名一致性
- 保持命名风格一致
- 使用有意义的字段名
- 避免使用缩写
- 遵循团队约定

## 示例表结构

### 用户表
```sql
CREATE TABLE t_users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '主键ID',
    username VARCHAR(50) NOT NULL COMMENT '用户名',
    email VARCHAR(100) UNIQUE COMMENT '邮箱',
    password_hash VARCHAR(255) NOT NULL COMMENT '密码哈希',
    status TINYINT NOT NULL DEFAULT 1 COMMENT '状态',
    is_deleted TINYINT NOT NULL DEFAULT 0 COMMENT '是否删除',
    create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    update_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    
    KEY idx_username (username),
    KEY idx_email (email),
    KEY idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户表';
```

### 订单表
```sql
CREATE TABLE t_orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '主键ID',
    order_no VARCHAR(32) UNIQUE NOT NULL COMMENT '订单号',
    user_id BIGINT NOT NULL COMMENT '用户ID',
    total_amount DECIMAL(10,2) NOT NULL COMMENT '订单总金额',
    status TINYINT NOT NULL DEFAULT 0 COMMENT '订单状态',
    is_deleted TINYINT NOT NULL DEFAULT 0 COMMENT '是否删除',
    create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    update_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    
    KEY idx_order_no (order_no),
    KEY idx_user_id (user_id),
    KEY idx_status (status),
    KEY idx_user_status_time (user_id, status, create_time)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='订单表';
```

## 进一步阅读
- 数据库设计：`00-project-structure/tech-stack.mdc`
- 实体类规范：`03-code-file-convertions/entity-class-conventions.mdc`
- Mapper 接口规范：`03-code-file-convertions/mapper-interface-conventions.mdc`