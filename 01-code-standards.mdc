# Spring Boot 代码规范

> **文件说明**：本文档定义了 Spring Boot 项目的核心代码规范，包括以下内容：
> - 代码结构规范（包结构、类组织、分层架构）
> - 命名规范（包命名、类命名、方法命名、变量命名）
> - 代码风格规范（格式化、注释、导入语句、代码布局）
> - 编码规范（异常处理、日志记录、性能优化）
> - 质量规范（代码审查、测试要求、文档规范）
> 
> 遵循统一的代码规范有助于提高代码质量、可读性和团队协作效率。

## 代码结构规范

### 标准目录结构
```
{project-name}/
├── src/main/java/com/{company}/{project}/
│   ├── controller/          # 控制器层
│   ├── service/            # 服务层
│   │   └── impl/          # 服务实现
│   ├── dao/               # 数据访问层
│   │   ├── entity/        # 实体类
│   │   └── mapper/        # Mapper接口
│   ├── vo/                # 视图对象
│   │   ├── request/       # 请求对象
│   │   └── response/      # 响应对象
│   ├── config/            # 配置类
│   ├── exception/         # 异常类
│   ├── util/              # 工具类
│   └── {Project}Application.java
├── src/main/resources/
│   ├── application.yml
│   ├── application-dev.yml
│   ├── application-prod.yml
│   └── mapper/            # MyBatis映射文件
└── src/test/java/         # 测试代码
```

### 包结构约定
```java
com.{company}.{project}.{module}.{layer}

// 示例
com.example.user.controller.UserController
com.example.user.service.UserService
com.example.user.service.impl.UserServiceImpl
com.example.user.dao.entity.UserEntity
com.example.user.dao.mapper.UserMapper
com.example.user.vo.request.CreateUserRequest
com.example.user.vo.response.UserResponse
```

## 命名规范

### 包命名
- **格式**：全小写字母，使用点分隔符
- **规则**：`com.{company}.{project}.{module}.{layer}`
- **示例**：`com.example.user.controller`

### 类命名
- **实体类**：`{Module}Entity`（如：`UserEntity`）
- **服务类**：`{Module}Service`、`{Module}ServiceImpl`
- **控制器类**：`{Module}Controller`
- **数据访问类**：`{Module}Mapper`
- **请求响应类**：`Create{Module}Request`、`{Module}Response`
- **配置类**：`{Module}Config`
- **异常类**：`{Module}Exception`

### 方法命名
- **查询方法**：`get{Module}ById`、`list{Module}s`、`find{Module}s`
- **操作方法**：`create{Module}`、`update{Module}`、`delete{Module}ById`
- **业务方法**：`process{Module}`、`validate{Module}`、`convert{Module}`

### 变量命名
- **字段命名**：驼峰命名法（如：`userName`、`createTime`）
- **局部变量**：驼峰命名法（如：`userList`、`isValid`）
- **方法参数**：驼峰命名法（如：`userId`、`request`）
- **常量**：全大写，下划线分隔（如：`MAX_RETRY_COUNT`）

## 代码风格规范

### 代码格式化
```java
// 缩进：4个空格
// 行长度：120字符
// 大括号：K&R风格
public class UserService {
    
    public UserResponse getUserById(Long userId) {
        if (userId == null) {
            throw new IllegalArgumentException("用户ID不能为空");
        }
        return userMapper.selectById(userId);
    }
}
```

### 导入语句
```java
// 导入顺序：Java标准库 -> 第三方库 -> 项目内部
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import com.example.user.dao.mapper.UserMapper;
import com.example.user.vo.response.UserResponse;
```

### 注释规范
```java
/**
 * 用户服务实现类
 * 
 * @author 开发者姓名
 * @since 2024-01-01
 */
@Service
public class UserServiceImpl implements UserService {
    
    /**
     * 根据用户ID获取用户信息
     * 
     * @param userId 用户ID
     * @return 用户信息
     * @throws IllegalArgumentException 当用户ID为空时
     */
    public UserResponse getUserById(Long userId) {
        // 参数验证
        if (userId == null) {
            throw new IllegalArgumentException("用户ID不能为空");
        }
        
        // 查询用户信息
        return userMapper.selectById(userId);
    }
}
```

## 编码规范

### 异常处理规范
```java
// 1. 使用具体的异常类型
public UserResponse getUserById(Long userId) {
    if (userId == null) {
        throw new IllegalArgumentException("用户ID不能为空");
    }
    
    try {
        return userMapper.selectById(userId);
    } catch (DataAccessException e) {
        log.error("查询用户失败，用户ID：{}", userId, e);
        throw new BusinessException("查询用户信息失败");
    }
}

// 2. 异常信息要具体明确
throw new BusinessException("用户不存在，用户ID：" + userId);

// 3. 避免空的catch块
try {
    // 业务逻辑
} catch (Exception e) {
    log.error("操作失败", e);
    throw new BusinessException("操作失败，请稍后重试");
}
```

### 日志记录规范
```java
@Slf4j
@Service
public class UserServiceImpl implements UserService {
    
    public UserResponse createUser(CreateUserRequest request) {
        log.info("开始创建用户，用户名：{}", request.getUsername());
        
        try {
            // 业务逻辑
            UserResponse response = doCreateUser(request);
            log.info("用户创建成功，用户ID：{}", response.getId());
            return response;
        } catch (Exception e) {
            log.error("用户创建失败，用户名：{}", request.getUsername(), e);
            throw e;
        }
    }
    
    // 日志级别使用规范
    // ERROR: 系统错误，需要立即处理
    // WARN: 警告信息，需要关注
    // INFO: 重要的业务流程信息
    // DEBUG: 调试信息，生产环境不输出
}
```

### 性能优化规范
```java
// 1. 避免N+1查询
@Transactional(readOnly = true)
public List<UserResponse> getUsersWithRoles() {
    // 错误做法：N+1查询
    // List<User> users = userMapper.selectAll();
    // users.forEach(user -> user.setRoles(roleMapper.selectByUserId(user.getId())));
    
    // 正确做法：一次查询
    return userMapper.selectUsersWithRoles();
}

// 2. 使用批量操作
@Transactional
public void batchCreateUsers(List<CreateUserRequest> requests) {
    List<User> users = requests.stream()
        .map(this::convertToUser)
        .collect(Collectors.toList());
    userMapper.batchInsert(users);
}

// 3. 合理使用缓存
@Cacheable(value = "user", key = "#userId")
public UserResponse getUserById(Long userId) {
    return userMapper.selectById(userId);
}
```

### 安全编码规范
```java
// 1. 输入验证
@PostMapping("/users")
public CommonResponse<UserResponse> createUser(@RequestBody @Valid CreateUserRequest request) {
    // @Valid 注解会自动验证请求参数
    return userService.createUser(request);
}

// 2. SQL注入防护
@Select("SELECT * FROM t_user WHERE username = #{username}")
User selectByUsername(@Param("username") String username);

// 3. 敏感信息保护
public class UserResponse {
    @JsonIgnore
    private String password;  // 不返回密码
    
    @JsonSerialize(using = PhoneNumberSerializer.class)
    private String phone;     // 脱敏处理
}
```

## 质量规范

### 代码审查规范
- **功能正确性**：业务逻辑是否正确，边界条件是否处理
- **代码质量**：命名是否清晰，结构是否合理，注释是否完整
- **性能考虑**：是否存在性能问题，是否有内存泄漏风险
- **安全性**：是否存在安全漏洞，输入验证是否充分
- **可维护性**：代码是否易于理解和修改

### 测试规范
```java
// 1. 单元测试
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
    
    @Mock
    private UserMapper userMapper;
    
    @InjectMocks
    private UserServiceImpl userService;
    
    @Test
    @DisplayName("根据ID获取用户信息 - 成功")
    void getUserById_Success() {
        // Given
        Long userId = 1L;
        User user = User.builder().id(userId).username("test").build();
        when(userMapper.selectById(userId)).thenReturn(user);
        
        // When
        UserResponse result = userService.getUserById(userId);
        
        // Then
        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo(userId);
        assertThat(result.getUsername()).isEqualTo("test");
    }
}

// 2. 集成测试
@SpringBootTest
@Transactional
class UserControllerIntegrationTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @Test
    void createUser_Success() throws Exception {
        // 测试完整的API调用流程
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"username\":\"test\",\"email\":\"test@example.com\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200));
    }
}
```

### 文档规范
```java
/**
 * 用户服务接口
 * 
 * <p>提供用户相关的业务操作，包括用户的增删改查等功能。
 * 所有方法都应该进行参数验证和异常处理。</p>
 * 
 * @author 开发者姓名
 * @since 1.0.0
 * @version 1.0.0
 */
public interface UserService {
    
    /**
     * 根据用户ID获取用户信息
     * 
     * <p>通过用户ID查询用户详细信息，如果用户不存在则抛出异常。</p>
     * 
     * @param userId 用户ID，不能为null
     * @return 用户信息响应对象
     * @throws IllegalArgumentException 当用户ID为null时
     * @throws BusinessException 当用户不存在时
     * @since 1.0.0
     */
    UserResponse getUserById(Long userId);
}
```

## 代码规范检查清单

### 代码提交前检查
- [ ] **代码格式**：是否符合IDE格式化规范，缩进、换行是否正确
- [ ] **命名规范**：类名、方法名、变量名是否遵循命名约定
- [ ] **注释完整**：类和方法是否有完整的JavaDoc注释
- [ ] **导入清理**：是否移除未使用的import语句
- [ ] **代码质量**：是否有TODO、FIXME、魔法数字等需要处理的问题
- [ ] **异常处理**：是否正确处理异常，异常信息是否明确
- [ ] **日志记录**：关键操作是否有适当的日志记录
- [ ] **单元测试**：新增代码是否有对应的单元测试，测试覆盖率是否达标

### 代码审查检查
- [ ] **功能正确性**：业务逻辑是否正确，边界条件是否处理
- [ ] **代码结构**：分层是否清晰，职责是否单一
- [ ] **性能考虑**：是否存在性能问题，数据库查询是否优化
- [ ] **安全性**：输入验证是否充分，敏感信息是否保护
- [ ] **可维护性**：代码是否易于理解和修改
- [ ] **可扩展性**：是否考虑了未来的扩展需求
- [ ] **错误处理**：异常处理是否完善，错误信息是否友好
- [ ] **资源管理**：是否正确管理数据库连接、文件句柄等资源

### 代码规范工具配置
```xml
<!-- Checkstyle 配置 -->
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-checkstyle-plugin</artifactId>
    <version>3.1.2</version>
    <configuration>
        <configLocation>checkstyle.xml</configLocation>
        <encoding>UTF-8</encoding>
        <consoleOutput>true</consoleOutput>
        <failsOnError>true</failsOnError>
    </configuration>
</plugin>

<!-- SpotBugs 静态分析 -->
<plugin>
    <groupId>com.github.spotbugs</groupId>
    <artifactId>spotbugs-maven-plugin</artifactId>
    <version>4.7.3.0</version>
</plugin>
```

