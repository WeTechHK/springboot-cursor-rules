---
description: Springboot项目代码结构规范（目录结构与包结构约定），适用于所有 Spring Boot 项目。
globs:
alwaysApply: true
layer: L1
allowedReferences: [L1, L2, L3, L4]
---

# 项目结构和包结构规范

## 目录结构

### 强制要求
- **必须严格按照以下结构创建目录**
- **不允许创建任何规则中未定义的目录**
- **不允许将文件放置在规则中未定义的位置**
- **必须按照指定的顺序创建目录和文件**
- **如果目录中没有对应的文件，则不应该生成该目录**（按需创建原则）
- **必须强制用户提供选择一个有意义的springboot项目的group名和项目名**
- **group名和项目名，规则必须符合com.yourcompany.appname，其中group名=com.yourcompany，项目名=appname**
```
src/
├── main/
│   ├── java/
│   │   └── com/example/app/
│   │       ├── Application.java          # 主入口类
│   │       ├── filter/                   # 过滤器类（按需创建）
│   │       ├── interceptor/              # 拦截器类（按需创建）
│   │       ├── validator/                # 验证器类（按需创建）
│   │       ├── component/                # 组件类（按需创建）
│   │       ├── config/                   # 配置类
│   │       ├── controller/               # REST控制器
│   │       ├── service/                  # 业务逻辑服务
│   │       │   └── impl/                 # 服务实现类
│   │       ├── entity/                   # 实体类（对应数据库表结构）
│   │       ├── mapper/                   # Mapper接口
│   │       ├── dto/                      # 数据传输对象（按需创建）
│   │       ├── enums/                    # 枚举类（按需创建，所有文件必须以Enum.java结尾）
│   │       ├── constants/                # 常量类（按需创建，错误码必须用枚举）
│   │       ├── vo/                       # 视图对象
│   │       │   ├── request/              # 请求对象
│   │       │   └── response/             # 响应对象
│   │       ├── exception/                # 自定义异常
│   │       ├── task/                     # 定时任务（按需创建）
│   │       ├── util/                     # 工具类
│   │       └── security/                 # 安全相关类（按需创建）
│   └── resources/
│       ├── application.properties        # 应用配置（Properties格式）
│       ├── application.yml               # 应用配置（YAML格式）
│       ├── application-dev.yml           # 开发环境配置
│       ├── application-prod.yml          # 生产环境配置
│       ├── sql/                          # SQL脚本目录
│       │   ├── schema.sql                # DDL建表语句
│       │   └── data.sql                  # DML初始化数据
│       ├── static/                       # 静态资源（HTML、CSS、JS）
│       └── templates/                    # 视图模板（如Thymeleaf）
└── test/
    ├── java/
    │   └── com/example/app/
    │       ├── controller/               # 控制器测试
    │       ├── service/                  # 服务测试
    │       └── mapper/                   # Mapper测试
    └── resources/
        ├── application-test.yml          # 测试环境配置
        └── test-data/                    # 测试数据文件
```

### 创建顺序（必须遵守）
1. **创建 `vo/response/CommonResponse.java`** - 通用响应基类
2. **创建 `vo/request/CommonRequest.java`** - 通用请求基类
3. **创建 `vo/response/PageData.java`** - 分页数据封装类（作为CommonResponse的data字段值）
4. **创建 `vo/request/CommonPageRequest.java`** - 分页请求类（继承CommonRequest）
5. **创建 `dao/entity/` 目录和实体类** - 数据访问层实体
6. **创建 `dao/mapper/` 目录和Mapper接口** - 数据访问层接口
7. **创建具体的请求响应类** - 继承基础类的具体类

### 基础类创建验证
- [ ] 是否按顺序创建了所有基础类
- [ ] CommonPageRequest 是否继承了 CommonRequest
- [ ] PageData 是否为独立类（不继承任何类，只包含分页字段）
- [ ] PageData 是否只包含 total、pageNumber、pageSize、list 字段
- [ ] 是否跳过了任何基础类

### 禁止行为
- **禁止创建 `common/` 目录**
- **禁止将 `entity/` 放在 `dao/` 目录下**（必须与controller同级）
- **禁止将 `mapper/` 放在 `dao/` 目录下**（必须与controller同级）
- **禁止将 `response/` 放在 `common/` 目录下**
- **禁止跳过基础类直接创建具体类**
- **禁止创建不继承基础类的请求类**
- **禁止让 PageData 继承 CommonResponse**
- **禁止在 PageData 中包含 code 和 msg 字段**
- **禁止创建空目录**（只有当需要在目录中创建文件时才创建该目录）
- **禁止在 `enums/` 目录下创建不以 `Enum.java` 结尾的文件**
- **禁止在 `constants/` 目录下创建错误码常量类（必须使用 ErrorCodeEnum 枚举）**

## SQL文件规范

### 目录结构
- **SQL脚本必须放在 `src/main/resources/sql/` 目录下**
- **建表语句文件名：`schema.sql`**
- **初始化数据文件名：`data.sql`**

### 文件内容规范
- **schema.sql**：
  - 仅包含DDL语句（CREATE TABLE、CREATE INDEX、ALTER TABLE等）
  - 包含表结构定义、索引定义、约束定义
  - 不包含任何INSERT、UPDATE、DELETE语句
  - 建议包含 `IF NOT EXISTS` 判断，避免重复创建
  
- **data.sql**：
  - 仅包含DML语句（INSERT、UPDATE等）
  - 包含初始化数据、测试数据、基础配置数据
  - 建议使用 `ON DUPLICATE KEY UPDATE` 或类似机制避免重复插入
  - 必须与schema.sql分离

### 执行顺序
1. 先执行 `schema.sql` 创建表结构
2. 再执行 `data.sql` 初始化数据

### 示例结构
```
src/main/resources/sql/
├── schema.sql          # CREATE TABLE t_users ...
└── data.sql            # INSERT INTO t_users ...
```

### 禁止行为
- **禁止将SQL文件直接放在 resources 根目录**
- **禁止将建表语句和初始化数据混在同一个文件**
- **禁止在 schema.sql 中包含 INSERT 语句**
- **禁止在 data.sql 中包含 CREATE TABLE 语句**

## 包结构约定

根包名：选择一个有意义的根包名称（例如，com.yourcompany.appname）。

```java

// 基础包结构
com.{company}.{project}.{layer}

// 示例（基于目录结构）
com.example.app.Application                         # 主入口类
com.example.app.config.DatabaseConfig               # 配置类
com.example.app.controller.UserController           # 控制器
com.example.app.service.UserService                 # 服务接口
com.example.app.service.impl.UserServiceImpl        # 服务实现
com.example.app.entity.UserEntity                   # 实体类
com.example.app.mapper.UserMapper                   # Mapper接口
com.example.app.dto.UserDto                         # 数据传输对象
com.example.app.vo.request.CreateUserRequest        # 请求对象
com.example.app.vo.response.UserResponse            # 响应对象
com.example.app.exception.UserNotFoundException     # 自定义异常
com.example.app.task.ScheduledTask                  # 定时任务
com.example.app.util.DateUtils                      # 工具类
com.example.app.security.JwtUtil                    # 安全工具类

// 示例（当request和response对象比较多时，可以用Domain拆分一层）
com.example.app.vo.request.user.CreateUserRequest
com.example.app.vo.response.user.LoginRequest

// 测试包结构示例
com.example.app.controller.UserControllerTest  # 控制器测试
com.example.app.service.UserServiceTest        # 服务测试
com.example.app.mapper.UserMapperTest          # Mapper测试
```

## 进一步阅读
- 分层规范：
  - `04-conventions/controller.mdc`
  - `04-conventions/service.mdc`、`04-conventions/service-impl.mdc`
  - `04-conventions/mapper.mdc`
  - `04-conventions/entity.mdc`
  - `04-conventions/request.mdc`、`04-conventions/response.mdc`
  - `04-conventions/common-request.mdc`、`04-conventions/common-response.mdc`
  - `04-conventions/page-data.mdc`
  - `04-conventions/exception.mdc`、`04-conventions/exception-handler.mdc`
  - `04-conventions/task.mdc`
  - `04-conventions/utility.mdc`
  - `04-conventions/spring-config.mdc`
- 基础规则：
  - 命名规范：`03-coding/naming.mdc`
  - 代码风格：`03-coding/code-style.mdc`
  - 编码实践：`03-coding/coding.mdc`

