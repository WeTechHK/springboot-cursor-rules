---
description: 规范ErrorCodeEnum枚举类的结构和实现要求
globs: **/src/main/java/**/enums/ErrorCodeEnum.java
layer: L4
allowedReferences: [L4]
---

# ErrorCodeEnum 编码约定

## 适用范围
定义错误码枚举类 `ErrorCodeEnum` 的具体实现规范，遵循通用枚举约定。

## 核心规则

### 位置和命名
- 文件位置：`{package}.enums.ErrorCodeEnum`
- 类名：必须是 `ErrorCodeEnum`
- **禁止**：使用其他名称（ErrorCode、ErrorCodes等）
- **禁止**：放在 `constants/` 目录

### 结构要求
- 使用 `@Getter` 注解
- 固定字段：`code(String)`, `msg(String)`
- 构造器：`ErrorCodeEnum(String code, String msg)`
- **可选**：方法：`fromCode(String)` 查找方法

### 成功码（强制）
```java
SUCCESS("0", "success")
```

## 枚举值规范

### 命名规则
- 大写字母和下划线
- 语义明确
- 示例：`USERNAME_EXISTS`, `USER_NOT_FOUND`

### 分组顺序
```java
// 1. 成功码
SUCCESS("0", "success"),

// 2. 业务错误码（B类）
USERNAME_EXISTS("1001B00000001", "用户名已存在"),

// 3. 客户端错误码（C类）  
VALIDATION_ERROR("1001C00000001", "参数校验失败"),

// 4. 技术错误码（T类）
INTERNAL_ERROR("1001T00000001", "系统内部错误")
```

## 最小示例
```java
@Getter
public enum ErrorCodeEnum {
    SUCCESS("0", "success"),
    USERNAME_EXISTS("1001B00000001", "用户名已存在"),
    INTERNAL_ERROR("1001T00000001", "系统内部错误");
    
    private final String code;
    private final String msg;
    
    ErrorCodeEnum(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }
}
```

## 维护约定
- 新增枚举值必须添加JavaDoc注释
- 错误码一旦定义不得修改含义
- 按类型分组，组内按模块或字母序排列
- **禁止**：修改SUCCESS的code和msg

## 相关规则
- 通用枚举: `04-conventions/enum.mdc`
- 使用方: `04-conventions/common-response.mdc`
