---
description: 定义验证类的编码标准，包括自定义验证器、验证注解和验证逻辑规范
globs: **/src/main/java/**/validation/**.java
layer: L4
allowedReferences: [L4]
---

# Validation 编码约定

## 适用范围
定义自定义验证器的实现规范，扩展Bean Validation标准验证功能。

## 核心规则

### 注解定义
- `@Target` 指定作用目标（FIELD, METHOD, PARAMETER）
- `@Retention(RUNTIME)` 运行时保留
- `@Constraint(validatedBy = XxxValidator.class)` 关联验证器
- 提供 `message()`, `groups()`, `payload()` 方法

### 验证器类
- 实现 `ConstraintValidator<注解, 类型>`
- 类名以 `Validator` 结尾
- `initialize()` 方法初始化
- `isValid()` 方法实现验证逻辑

### 验证逻辑
- null值处理：通常返回true（由@NotNull处理）
- 有效返回true，无效返回false
- 避免耗时操作
- **禁止**：抛出异常

## 完整示例

### 手机号验证注解
```java
/**
 * 手机号验证注解
 */
@Target({ElementType.FIELD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = PhoneValidator.class)
@Documented
public @interface Phone {
    
    /**
     * 验证失败消息
     */
    String message() default "手机号格式不正确";
    
    /**
     * 验证分组
     */
    Class<?>[] groups() default {};
    
    /**
     * 负载
     */
    Class<? extends Payload>[] payload() default {};
}
```

### 手机号验证器
```java
/**
 * 手机号验证器
 */
@Slf4j
public class PhoneValidator implements ConstraintValidator<Phone, String> {
    
    private static final String PHONE_PATTERN = "^1[3-9]\\d{9}$";
    private Pattern pattern;
    
    @Override
    public void initialize(Phone constraintAnnotation) {
        // 编译正则表达式（只编译一次）
        pattern = Pattern.compile(PHONE_PATTERN);
    }
    
    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        // null值由@NotNull处理，这里返回true
        if (value == null) {
            return true;
        }
        
        // 验证格式
        boolean valid = pattern.matcher(value).matches();
        
        if (!valid) {
            log.debug("手机号验证失败: {}", value);
        }
        
        return valid;
    }
}
```

## 使用示例

### 在Request中使用
```java
@Data
@NoArgsConstructor
public class RegisterRequest extends CommonRequest {
    
    @NotBlank(message = "用户名不能为空")
    @Size(min = 3, max = 20, message = "用户名长度3-20")
    private String username;
    
    @NotBlank(message = "手机号不能为空")
    @Phone  // 使用自定义验证
    private String phone;
    
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    private String email;
}
```

### Controller触发验证
```java
@PostMapping("/register")
public CommonResponse<Void> register(@Valid @RequestBody RegisterRequest request) {
    // 验证失败会自动抛出MethodArgumentNotValidException
    // 被GlobalExceptionHandler捕获并返回错误信息
    return userService.register(request);
}
```

## 常见自定义验证器

### 身份证号验证
```java
@Phone
private String phone;

@IdCard  // 自定义注解
private String idCard;

@DateRange(min = "2020-01-01", max = "2025-12-31")
private LocalDate birthDate;
```

### 枚举值验证
```java
/**
 * 验证值是否在枚举范围内
 */
@EnumValue(enumClass = UserRole.class, message = "角色值无效")
private String role;
```

## 最佳实践

### 性能优化
- 在 `initialize()` 中编译正则表达式
- 避免在 `isValid()` 中进行I/O操作
- 考虑缓存验证结果（如有必要）

### 错误消息
- 提供清晰的默认消息
- 支持国际化（message key）
- 可通过注解参数自定义

### null处理
- null值通常返回true
- 配合 `@NotNull` 使用

## 相关规则
- 请求对象: `04-conventions/request.mdc`
- 异常处理: `04-conventions/exception-handler.mdc`
