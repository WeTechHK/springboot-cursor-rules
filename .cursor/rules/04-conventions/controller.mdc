---
description: 定义RestController类的编码标准，包括API路由映射、HTTP方法注解、依赖注入和错误处理
globs: **/src/main/java/**/controller/**Controller.java
layer: L4
allowedReferences: [L4]
---

# Controller 编码约定

## 适用范围
定义REST控制器类的实现规范，负责HTTP请求路由、参数接收和响应返回。

## 核心规则

### 类定义
- `@RestController` 标记控制器
- 类名以 `Controller` 结尾
- `@RequestMapping("/api/v1/{resource}")` 定义基础路径
- `@Autowired` 字段注入依赖

### HTTP方法使用
- **仅使用** `@GetMapping` 和 `@PostMapping`
- 简单查询：GET + `@RequestParam`/`@PathVariable`
- 复杂查询：POST + `@RequestBody` (Search*Request)
- 所有修改（增删改）：POST + `@RequestBody`
- **禁止**：使用PUT/PATCH/DELETE

### 返回类型
- 统一返回 `CommonResponse<T>`
- 分页返回 `CommonResponse<PageData<T>>`
- **禁止**：直接返回实体或VO

### 参数校验
- POST请求：`@Valid @RequestBody`
- GET参数：`@RequestParam(defaultValue = "...")`
- 路径参数：`@PathVariable`

### 职责约束
- 方法长度：<20行
- 职责单一：仅路由和参数接收
- **禁止**：包含业务逻辑
- **禁止**：处理业务异常（交给GlobalExceptionHandler）

## API文档
- `@Operation` 注解说明接口功能
- JavaDoc注释（摘要、参数、返回值）

## 最小示例
```java
@RestController
@RequestMapping("/api/v1/users")
@Slf4j
public class UserController {
    
    @Autowired
    private UserService userService;
    
    @PostMapping("/create")
    @Operation(summary = "创建用户", description = "创建新用户")
    public CommonResponse<UserResponse> createUser(
        @Valid @RequestBody CreateUserRequest request
    ) {
        return userService.createUser(request);
    }
    
    @GetMapping("/{id}")
    @Operation(summary = "获取用户", description = "根据ID获取用户")
    public CommonResponse<UserResponse> getUser(@PathVariable Long id) {
        return userService.getUserById(id);
    }
    
    @PostMapping("/search")
    @Operation(summary = "搜索用户", description = "分页搜索用户")
    public CommonResponse<PageData<UserResponse>> searchUsers(
        @Valid @RequestBody SearchUserRequest request
    ) {
        return userService.searchUsers(request);
    }
}
```

## 相关规则
- 请求对象: `04-conventions/request.mdc`
- 响应对象: `04-conventions/response.mdc`
- 异常处理: `04-conventions/exception-handler.mdc`
