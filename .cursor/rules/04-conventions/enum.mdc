---
description: 定义所有枚举类的通用编码标准和命名规范
globs: **/src/main/java/**/enums/**Enum.java
layer: L4
allowedReferences: [L4]
---

# 枚举类编码约定

## 适用范围
所有枚举类的通用规范，不包含具体业务逻辑。

## 核心规则

### 命名规范
- 类名：必须以 `Enum` 结尾
- 示例：`UserRoleEnum`, `CourseStatusEnum`, `ErrorCodeEnum`
- **禁止**：不带后缀（UserRole, CourseStatus等）

### 位置规范
- 文件位置：`{package}.enums.*Enum`
- 包名示例：`com.example.app.enums`

### 结构要求
- 使用 `@Getter` 注解（Lombok）
- 字段声明为 `private final`
- 枚举值使用大写字母和下划线
- 每个枚举值提供JavaDoc注释

## 标准结构模板

### 基础枚举（仅code）
```java
@Getter
public enum StatusEnum {
    ACTIVE("1", "激活"),
    INACTIVE("0", "未激活");
    
    private final String code;
    private final String desc;
    
    StatusEnum(String code, String desc) {
        this.code = code;
        this.desc = desc;
    }
}
```

### 扩展枚举（带业务方法）
```java
@Getter
public enum UserRoleEnum {
    ADMIN("admin", "管理员"),
    TEACHER("teacher", "教师"),
    STUDENT("student", "学生");
    
    private final String code;
    private final String name;
    
    UserRoleEnum(String code, String name) {
        this.code = code;
        this.name = name;
    }
    
    public static UserRoleEnum fromCode(String code) {
        for (UserRoleEnum role : values()) {
            if (role.code.equals(code)) {
                return role;
            }
        }
        throw new IllegalArgumentException("Invalid code: " + code);
    }
}
```

## 推荐方法

### 查找方法（fromCode）
- **可选**：提供根据code查找枚举的静态方法
- **可选**：找不到时抛出IllegalArgumentException

### 验证方法（isValid）
```java
public static boolean isValid(String code) {
    return Arrays.stream(values())
        .anyMatch(e -> e.code.equals(code));
}
```

## 维护约定
- 枚举值一旦定义避免修改
- 新增枚举值添加在末尾
- 按业务逻辑分组，组内排序
- **禁止**：在枚举中包含复杂业务逻辑

## 相关规则
- 特定枚举: `04-conventions/error-code-enum.mdc`
