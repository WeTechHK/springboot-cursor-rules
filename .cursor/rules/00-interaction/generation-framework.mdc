---
description: AI代码生成综合框架，基于设计文档+规则+上下文+最佳实践
layer: L0
allowedReferences: [L0, L1, L2, L3, L4]
alwaysApply: true
---

# AI代码生成框架

## 核心原则

```
设计文档 + 代码规则 + 上下文推理 + 技术实践 = 高质量代码
```

**设计文档优先级**：
- **有设计文档**：严格遵循
- **无设计文档**：询问用户或给出建议
- **设计不完整**：补充并确认

## 决策流程

### 1. 需求解析
```
用户输入 → 意图识别 → 上下文理解 → 技术方案 → 代码生成
```

**关键问题**：
- 解决什么问题？
- 业务背景？
- 技术栈和约束？
- 期望输出？

### 2. 信息收集

**设计文档**：
- 检查`docs/`目录下的技术设计文档
- 分析API、数据模型、业务规则

**上下文**：
- 显式信息：技术栈、功能需求、风格偏好
- 隐式信息：项目结构、编码规范、业务领域

### 3. 技术决策

**架构层面**：
- 项目类型、技术选型、设计模式

**实现层面**：
- 代码结构、命名规范、注解使用

## 设计文档处理

### 检查流程
1. 扫描`docs/`目录
2. 分析文档内容
3. 识别API、数据模型、业务规则
4. 评估完整性

### 处理策略
- **完整文档**：严格执行
- **设计不完整**：补充并确认
- **无文档**：询问或给出建议

### 缺失处理模板
```
**当前状态**：未找到设计文档
**建议方案**：基于需求分析给出设计建议
**设计建议**：API设计、数据模型、业务规则、技术约束
**请确认**：是否同意基于以上理解进行设计
```

## 代码生成前置要求（强制）

### 必须执行的步骤

#### 步骤1：技术选型确认
- **构建工具**：项目统一使用Gradle（不使用Maven）
- **包路径**：必须从用户获取明确的包路径（如com.edu.soop）
- **数据库**：明确数据库类型（MySQL/PostgreSQL等）

#### 步骤2：加载相关规则（强制使用fetch_rules工具）
在生成任何代码之前，**必须使用fetch_rules工具**加载以下规则：

**必须加载的规则**：
- `04-conventions/entity` - 实体类规范（@Data、@Builder等）
- `04-conventions/mapper` - Mapper接口规范
- `04-conventions/service` - Service接口规范（返回CommonResponse）
- `04-conventions/service-impl` - ServiceImpl规范（@Slf4j、@Transactional）
- `04-conventions/controller` - Controller规范（@Slf4j、@Operation）
- `04-conventions/request` - 请求VO规范
- `04-conventions/response` - 响应VO规范
- `04-conventions/gradle` - Gradle构建文件规范

**根据需要加载的规则**：
- `04-conventions/exception` - 自定义异常
- `04-conventions/exception-handler` - 全局异常处理器
- `04-conventions/logging-aspect` - 日志切面
- `04-conventions/common-request` - 通用请求基类
- `04-conventions/common-response` - 通用响应基类

#### 步骤3：生成文件清单与规则映射
列出需要生成的所有文件，并明确每个文件对应的规则：

**示例清单**：
```markdown
| 文件 | 对应规则 | 状态 |
|------|---------|------|
| UserEntity.java | 04-conventions/entity | 待生成 |
| UserMapper.java | 04-conventions/mapper | 待生成 |
| UserService.java | 04-conventions/service | 待生成 |
| UserServiceImpl.java | 04-conventions/service-impl | 待生成 |
| UserController.java | 04-conventions/controller | 待生成 |
| build.gradle | 04-conventions/gradle | 待生成 |
| settings.gradle | 04-conventions/gradle | 待生成 |
```

#### 步骤4：逐文件严格应用规则
对于每个待生成的文件：
1. 查找对应的04-conventions规则
2. 完整阅读规则内容（已通过fetch_rules加载）
3. **严格按照规则要求生成代码**
4. 生成后立即对照规则验证

### 强制检查清单（生成每个文件后立即验证）

生成每个文件后，对照对应的`04-conventions`规则检查：
- 必需注解是否完整（如Entity的@Data/@Builder，Controller的@Slf4j/@Operation）
- 返回类型是否正确（如Service/ServiceImpl返回CommonResponse）
- 关键配置是否符合要求（如Mapper使用@Param，ServiceImpl使用@Transactional）

**整体验证**（所有文件生成后）：
- Gradle文件完整（build.gradle、settings.gradle），无pom.xml
- 所有类的注解、返回类型、命名符合对应规则
- 代码可编译通过

## 代码生成标准

### 优先级
```
设计文档 > 代码规则 > 技术实践 > 通用规范
```

### 渐进式生成
```
最小可用 → 功能完善 → 性能优化 → 代码重构
```

### 上下文感知
- **项目级**：分析现有代码结构和风格
- **任务级**：当前功能模块、依赖接口、数据模型

## 需求分析模板

```markdown
## 需求分析
- 业务需求：[用户明确需求]
- 技术需求：[推断技术要求]
- 设计文档：[检查结果]
- 约束条件：[规则和限制]

## 技术方案
- 架构设计：[方案]
- 技术选型：[具体技术]
- 实现策略：[步骤]

## 执行决策
- 需要确认：[具体项]
- 无需确认：[直接执行]
```

## 代码生成检查

### 设计文档检查
- [ ] 检查docs/目录
- [ ] 遵循API接口规范
- [ ] 遵循数据模型
- [ ] 遵循业务规则

### 规则遵循检查
- [ ] 目录结构正确
- [ ] 基础类创建顺序
- [ ] 继承关系正确
- [ ] 命名符合规范
- [ ] 注解使用正确

### 质量检查
- [ ] 代码可编译
- [ ] 代码可运行
- [ ] 符合规范
- [ ] 功能完整
- [ ] 错误处理完善

## 质量保证

### 分阶段执行
1. **基础结构**：目录和基础类
2. **核心功能**：实体、Mapper、Service
3. **API层**：Controller、Request/Response
4. **质量优化**：日志切面、异常处理

### 每阶段验证
- 结构符合规范
- 代码质量达标
- 功能完整

### 质量标准
- 可编译：无编译错误
- 可运行：能在Spring Boot中运行
- 规范性：遵循编码规范
- 完整性：包含错误处理、日志、验证
- 安全性：输入校验、SQL防注入、脱敏
- 性能：避免N+1、合理缓存

## 规则引用规范

**代码生成时明确说明**：
- 应用的规则文件路径
- 规则中的具体要求
- 为什么选择这个规则

**优先级**：
1. 项目特定规则
2. 技术最佳实践
3. 通用编程规范

## 规则分层架构

规则文件采用严格五层架构，单向依赖，禁止反向引用：

```
L0 (00-interaction) → AI指导层（框架与角色）
      ↓
L1 (01-structure)   → 项目结构层（目录与技术栈）
      ↓
L2 (02-design)      → 设计标准层（API、数据库、模式）
      ↓
L3 (03-coding)      → 编码规范层（命名、风格、测试）
      ↓
L4 (04-conventions) → 具体约定层（各类文件规范）
```

**核心原则**：
- 只能向下引用（L0→L1→L2→L3→L4）
- L4只能内部相互引用，不能向上引用L0-L3
- 每个规则文件的 frontmatter 包含 `layer` 和 `allowedReferences` 字段

**详细说明**：参见 `00-interaction/rules-architecture.mdc`

## 相关规则
- 角色定义: `00-interaction/role-definition.mdc`
- 分层架构: `00-interaction/rules-architecture.mdc`
- 项目结构: `01-structure/project.mdc`
- 设计标准: `02-design/`
- 编码规范: `03-coding/`
- 文件约定: `04-conventions/`
