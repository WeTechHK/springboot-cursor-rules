---
description: AI代码生成综合框架，基于设计文档+代码生成规则+上下文推理+技术最佳实践
alwaysApply: true
---

# AI代码生成综合框架

## 核心原则

当用户输入代码生成需求时，AI必须基于以下四维框架进行综合决策：

```
设计文档 + 代码生成规则 + 上下文推理 + 技术最佳实践 = 高质量代码生成
```

**设计文档优先级处理：**
- **有设计文档**：严格遵循设计文档的规范和约束
- **无设计文档**：主动询问用户是否自行理解并给出设计建议
- **设计不完整**：基于现有设计文档，补充缺失部分并确认

## 决策流程

### 1. 需求解析阶段
```
用户输入 → 意图识别 → 上下文理解 → 技术方案 → 代码生成
```

**关键问题：**
- 用户想要解决什么问题？
- 这个问题的业务背景是什么？
- 用户的技术栈和约束条件是什么？
- 期望的输出格式和交互方式是什么？

### 2. 上下文信息收集

**设计文档信息：**
- 检查`docs/`目录下的技术设计文档
- 分析API接口设计、数据模型、架构约束
- 识别业务规则、安全要求、性能指标

**显式信息：**
- 用户明确提到的技术栈（Spring Boot、React等）
- 具体的功能需求（"创建用户管理模块"）
- 代码风格偏好（"使用注解方式"）

**隐式信息：**
- 项目结构（从现有文件推断）
- 编码规范（从规则文件推断）
- 业务领域（从项目名称和内容推断）

### 3. 技术决策框架

**架构层面：**
- 项目类型：单体应用 vs 微服务
- 技术选型：基于项目规则和最佳实践
- 设计模式：遵循SOLID原则和项目约定

**实现层面：**
- 代码结构：遵循项目包结构规范
- 命名规范：遵循项目命名约定
- 注解使用：遵循框架最佳实践

## 设计文档处理机制

### 1. 设计文档检查流程

**第一步：检查设计文档**
```
1. 扫描docs/目录下的技术设计文档
2. 分析文档内容，提取相关设计信息
3. 识别API接口、数据模型、业务规则等约束
4. 评估设计文档的完整性和准确性
```

**第二步：设计文档状态判断**
- **完整设计文档**：包含完整的API设计、数据模型、业务规则
- **不完整设计文档**：部分设计缺失，需要补充
- **无设计文档**：没有找到相关的技术设计文档

**第三步：处理策略选择**
- **有完整设计文档**：严格按照设计文档执行
- **设计不完整**：基于现有设计补充，并主动确认
- **无设计文档**：主动询问用户是否自行理解并给出设计建议

### 2. 设计文档缺失处理

**当没有找到设计文档时，AI应该：**

```
## 设计文档缺失处理

**当前状态：** 未找到相关的技术设计文档

**建议方案：** 基于需求分析，我可以自行理解并给出设计建议

**设计建议：**
- **API设计**：[基于需求推断的接口设计]
- **数据模型**：[基于需求推断的实体设计]
- **业务规则**：[基于需求推断的业务逻辑]
- **技术约束**：[基于项目规则的技术限制]

**请确认：** 是否同意我基于以上理解进行设计，还是您希望提供更详细的设计文档？
```

### 3. 设计文档不完整处理

**当设计文档不完整时，AI应该：**

```
## 设计文档补充

**现有设计：** [分析现有设计文档的内容]

**缺失部分：** [识别设计文档中缺失的关键信息]

**补充建议：** [基于需求分析和最佳实践补充缺失设计]

**请确认：** 是否同意我基于以上补充建议完善设计，然后进行代码生成？
```

## 代码生成标准

### 1. 优先级原则
```
设计文档 > 代码生成规则 > 技术最佳实践 > 通用编程规范
```

**优先级说明：**
- **设计文档**：技术设计文档是最高优先级，必须严格遵循
- **代码生成规则**：项目规则是团队共识，确保代码一致性
- **技术最佳实践**：在满足设计文档和规则的前提下应用
- **通用编程规范**：作为兜底标准，确保代码质量

### 2. 渐进式生成
```
最小可用版本 → 功能完善 → 性能优化 → 代码重构
```

**示例：**
- 用户说"创建用户管理"
- 第一步：生成基础的Controller、Service、Entity
- 第二步：添加参数校验、异常处理
- 第三步：添加日志记录、事务管理
- 第四步：优化性能和代码质量

### 3. 上下文感知生成

**项目级上下文：**
- 分析现有代码结构和风格
- 识别项目的技术栈和架构模式
- 理解业务领域和术语

**任务级上下文：**
- 当前正在开发的功能模块
- 相关的依赖和接口
- 数据模型和业务规则

## 需求分析模板

### 1. 标准需求分析模板

**当用户提出需求时，AI应该：**

```
## 需求分析
- **业务需求**：[用户明确表达的功能需求]
- **技术需求**：[从需求中推断的技术要求]
- **根包名**：[确认根包名格式为com.yourcompany.appname]
- **设计文档**：[检查docs/目录，分析相关设计文档]
- **约束条件**：[项目规则、技术栈限制等]
- **上下文信息**：[从现有代码和文档中获取的信息]

## 设计文档分析
- **API设计**：[基于设计文档的接口规范]
- **数据模型**：[基于设计文档的实体和表结构]
- **业务规则**：[基于设计文档的业务逻辑约束]
- **安全要求**：[基于设计文档的安全规范]

## 技术方案
- **架构设计**：[基于设计文档和项目规则的方案]
- **技术选型**：[具体的技术栈和框架选择]
- **实现策略**：[分步骤的实现计划]

## 代码生成计划
- **第一步**：[核心功能实现]
- **第二步**：[功能完善和优化]
- **第三步**：[测试和验证]

## 执行决策
- **需要确认：** 请确认：[具体确认项]
- **无需确认：** 我将开始[具体操作]
```

## 代码生成检查清单

### 1. 设计文档检查

**设计文档相关检查：**
- [ ] 是否检查了docs/目录下的相关设计文档？
- [ ] 是否严格遵循设计文档中的API接口规范？
- [ ] 是否按照设计文档的数据模型进行实体设计？
- [ ] 是否遵循设计文档中的业务规则和约束？
- [ ] 是否考虑了设计文档中的安全要求？
- [ ] 是否按照设计文档的错误码规范进行异常处理？

### 2. 项目规则遵循检查

**代码生成规则检查：**
- [ ] 是否遵循项目包结构规范？
- [ ] 是否使用正确的根包名格式（com.yourcompany.appname）？
- [ ] 是否使用正确的命名约定？
- [ ] 是否包含必要的注解和配置？
- [ ] 是否处理了异常和错误情况？
- [ ] 是否添加了适当的日志记录？
- [ ] 是否考虑了事务管理？
- [ ] 是否包含了必要的参数校验？
- [ ] 是否遵循了安全编码规范？

### 3. 技术最佳实践检查

**代码质量检查：**
- [ ] 是否遵循SOLID原则？
- [ ] 是否使用了适当的设计模式？
- [ ] 是否考虑了性能优化？
- [ ] 是否包含了必要的测试？
- [ ] 是否遵循了RESTful API设计？
- [ ] 是否使用了适当的缓存策略？
- [ ] 是否考虑了并发安全？

### 4. 用户需求满足检查

**功能完整性检查：**
- [ ] 是否完全满足用户的功能需求？
- [ ] 是否考虑了边界条件和异常情况？
- [ ] 是否提供了完整的错误处理？
- [ ] 是否包含了必要的日志记录？
- [ ] 是否考虑了用户体验？

## 交互模式模板

### 1. 新功能开发模板

```
## 需求分析
- **业务需求**：[用户明确表达的功能需求]
- **技术需求**：[从需求中推断的技术要求]
- **设计文档**：[检查docs/目录，分析相关设计文档]
- **约束条件**：[项目规则、技术栈限制等]
- **上下文信息**：[从现有代码和文档中获取的信息]

## 设计文档分析
- **API设计**：[基于设计文档的接口规范]
- **数据模型**：[基于设计文档的实体和表结构]
- **业务规则**：[基于设计文档的业务逻辑约束]
- **安全要求**：[基于设计文档的安全规范]

## 技术方案
- **架构设计**：[基于设计文档和项目规则的方案]
- **技术选型**：[具体的技术栈和框架选择]
- **实现策略**：[分步骤的实现计划]

## 代码生成计划
- **第一步**：[核心功能实现]
- **第二步**：[功能完善和优化]
- **第三步**：[测试和验证]

## 执行决策
- **需要确认：** 请确认：[具体确认项]
- **无需确认：** 我将开始[具体操作]
```

### 2. 代码重构模板

```
## 代码分析
- **当前问题**：[用户描述的问题]
- **代码结构**：[现有代码的分析]
- **优化目标**：[重构的目标和期望]

## 重构方案
- **问题根因**：[基于规则分析的问题原因]
- **优化策略**：[具体的重构方案]
- **影响范围**：[重构涉及的文件和模块]

## 重构计划
- **第一步**：[核心问题修复]
- **第二步**：[代码结构优化]
- **第三步**：[测试验证]

## 执行决策
- **需要确认：** 请确认：[具体确认项]
- **无需确认：** 我将开始[具体操作]
```

### 3. 问题修复模板

```
## 问题诊断
- **问题描述**：[用户描述的问题现象]
- **错误信息**：[具体的错误日志或异常]
- **复现步骤**：[问题复现的步骤]

## 根因分析
- **技术根因**：[基于规则分析的技术原因]
- **业务根因**：[业务逻辑层面的原因]
- **环境因素**：[环境配置相关的原因]

## 修复方案
- **修复策略**：[具体的修复方案]
- **修复步骤**：[详细的修复步骤]
- **验证方法**：[修复后的验证方法]

## 执行决策
- **需要确认：** 请确认：[具体确认项]
- **无需确认：** 我将开始[具体操作]
```

## 典型场景示例

### 示例1：有设计文档的新功能开发

**用户输入：** "创建用户管理模块，包含用户的增删改查功能"

**AI响应：**
```
## 需求分析
- **业务需求**：创建用户管理模块，包含用户的增删改查功能
- **技术需求**：基于Spring Boot + MyBatis实现RESTful API
- **设计文档**：已找到docs/学生管理系统技术设计文档.md，包含完整的用户管理模块设计
- **约束条件**：遵循项目编码规范，使用CommonResponse统一响应格式
- **上下文信息**：项目使用Spring Boot 3.x，MyBatis注解模式，MySQL数据库

## 设计文档分析
- **API设计**：基于设计文档，用户管理包含创建用户、获取用户信息、用户登录、禁用/启用用户等接口
- **数据模型**：用户表(t_users)包含id、username、password_hash、role、enabled、create_time、update_time字段
- **业务规则**：用户名全局唯一，密码强度要求，角色权限控制，登录失败锁定机制
- **安全要求**：JWT认证，密码哈希存储，参数校验，权限控制

## 技术方案
- **架构设计**：Controller -> Service -> Mapper -> Entity 分层架构
- **技术选型**：Spring Boot + MyBatis + MySQL + JWT认证
- **实现策略**：严格按照设计文档的API规范和数据模型进行实现

## 代码生成计划
- **第一步**：创建UserEntity实体类（基于设计文档的表结构）
- **第二步**：创建UserMapper数据访问层（基于设计文档的字段映射）
- **第三步**：创建UserService业务逻辑层（基于设计文档的业务规则）
- **第四步**：创建UserController控制器层（基于设计文档的API接口）
- **第五步**：创建请求响应对象（基于设计文档的参数结构）
- **第六步**：添加异常处理和日志记录（基于设计文档的错误码规范）

## 执行决策
- **无需确认**：我将严格按照设计文档开始创建用户管理模块的完整代码结构
```

### 示例2：无设计文档的新功能开发

**用户输入：** "创建课程管理模块，包含课程的增删改查功能"

**AI响应：**
```
## 需求分析
- **业务需求**：创建课程管理模块，包含课程的增删改查功能
- **技术需求**：基于Spring Boot + MyBatis实现RESTful API
- **设计文档**：未找到相关的技术设计文档
- **约束条件**：遵循项目编码规范，使用CommonResponse统一响应格式
- **上下文信息**：项目使用Spring Boot 3.x，MyBatis注解模式，MySQL数据库

## 设计文档缺失处理

**当前状态：** 未找到相关的技术设计文档

**需求分析：** 创建课程管理模块，包含课程的增删改查功能

**建议方案：** 基于需求分析，我可以自行理解并给出设计建议

**设计建议：**
- **API设计**：基于需求推断的接口设计
  - 请求路径：POST /api/v1/courses（创建课程）
  - 请求参数：name、code、teacherId、credits、semester
  - 响应参数：id、name、code、teacherId、credits、semester、status、createTime
  - 业务规则：课程代码唯一，学分≥1，状态管理

- **数据模型**：基于需求推断的实体设计
  - 实体字段：id、name、code、teacherId、credits、semester、status、createTime、updateTime
  - 表结构：t_courses表，主键id，唯一索引code
  - 关联关系：与用户表通过teacherId关联

- **业务规则**：基于需求推断的业务逻辑
  - 数据校验：课程名称非空，代码格式校验，学分范围校验
  - 权限控制：仅管理员可创建课程，教师可查看所授课程
  - 异常处理：课程代码重复，参数校验失败等异常场景

- **技术约束**：基于项目规则的技术限制
  - 技术栈：Spring Boot 3.x + MyBatis + MySQL
  - 编码规范：遵循项目命名规范和注解使用规范
  - 安全要求：JWT认证，参数校验，SQL防注入

**请确认：** 是否同意我基于以上理解进行设计，还是您希望提供更详细的设计文档？
```

## 质量保证

### 代码质量标准

**可编译性：**
- 生成的代码能够正常编译
- 包含必要的依赖和导入
- 语法正确，无编译错误

**可运行性：**
- 代码能够在Spring Boot环境中正常运行
- 包含必要的配置和注解
- 能够处理正常的业务流程

**规范性：**
- 严格遵循项目编码规范
- 保持与现有代码的一致性
- 使用统一的代码风格

**完整性：**
- 包含完整的错误处理
- 添加必要的日志记录
- 包含参数校验和业务校验

**安全性：**
- 所有输入都进行校验
- 使用预编译SQL防注入
- 敏感字段进行脱敏处理

**性能：**
- 避免N+1查询问题
- 合理使用缓存策略
- 优化数据结构和算法

**测试覆盖：**
- 核心业务逻辑测试覆盖率≥80%
- 工具类测试覆盖率≥90%
- 包含单元测试和集成测试

## 规则引用规范

### 明确引用规则文件

**代码生成时必须明确说明：**
- 应用的规则文件路径
- 规则文件中的具体要求
- 为什么选择这个规则

**示例：**
```
根据03-code-file-convertions/controller-class-conventions.mdc规范：
- 使用@RestController注解标记控制器类
- 统一返回CommonResponse<T>格式
- 添加@Slf4j日志记录
- 使用@Valid注解进行参数校验
- 添加@Operation注解提供API文档

根据02-coding-standards/coding-standards.mdc规范：
- 使用@Autowired字段注入，避免构造器注入
- 在关键业务逻辑处添加日志记录
- 使用具体异常类型，避免空catch块
```

### 规则优先级

**优先级顺序：**
1. 项目特定规则（.cursor/rules/）
2. 技术最佳实践
3. 通用编程规范
4. 个人偏好

## 进一步阅读

### 基础规则
- 项目结构规范：`00-project-structure/project-structure.mdc`
- 技术栈规范：`00-project-structure/tech-stack.mdc`
- 命名规范：`02-coding-standards/naming-standards.mdc`
- 编码实践：`02-coding-standards/coding-standards.mdc`
- 代码风格：`02-coding-standards/code-style-standards.mdc`

### 设计标准
- API设计规范：`01-design-standards/api-design-standards.mdc`
- 错误码设计：`01-design-standards/error-code-standards.mdc`
- 表结构设计：`01-design-standards/table-design-standards.mdc`
- 设计模式标准：`01-design-standards/design-pattern-standards.mdc`

### 代码文件约定
- 控制器规范：`03-code-file-convertions/controller-class-conventions.mdc`
- 服务层规范：`03-code-file-convertions/service-interface-conventions.mdc`、`service-impl-conventions.mdc`
- 数据访问层：`03-code-file-convertions/mapper-interface-conventions.mdc`
- 实体类规范：`03-code-file-convertions/entity-class-conventions.mdc`
- 请求响应对象：`03-code-file-convertions/request-class-conventions.mdc`、`response-class-conventions.mdc`
- 异常处理：`03-code-file-convertions/exception-class-conventions.mdc`、`global-exception-handler-conventions.mdc`