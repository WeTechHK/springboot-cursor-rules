---
description: 编码实践规范（依赖注入、异常、日志、事务、性能、安全、API返回、组织、测试），适用于所有 Spring Boot 项目。
globs:
alwaysApply: true
layer: L3
allowedReferences: [L3, L4]
---

# 编码规范

## 依赖注入（DI）
- 必须使用 `@Autowired` 字段注入（统一风格，便于快速接入与维护）
- 不使用构造器注入，除非规范或场景另有明确说明（例如特殊生命周期或必须依赖校验）
- 可选依赖请通过 `@Autowired(required = false)`、`@Nullable` 或 `ObjectProvider<T>` 处理，避免 NPE
- 避免循环依赖；如出现请重构依赖关系或通过事件/接口解耦

## 异常处理
- 使用具体异常类型；业务异常统一封装（如 `BusinessException`）
- 异常信息明确、可定位；禁止空 `catch`
- 数据访问异常转换为领域异常，并记录上下文

## 日志记录
- 在关键入口、核心步骤、异常处记录日志
- 包含必要上下文信息（主体、动作、主键、结果、耗时）；禁止输出敏感信息

## 事务与数据库
- 合理使用 `@Transactional`；注意同类内部自调用导致事务失效
- 避免 N+1 查询；优先批量操作与分页
- 限制单次返回规模；I/O 设置超时与重试策略

## 性能优化
- 避免无谓对象创建与反射；热点路径加缓存（如 `@Cacheable`）
- 合理的数据结构与算法；压测评估瓶颈并针对性优化

## 安全编码
- 所有输入校验（`@Valid` + 分组校验）；参数对象尽量不可变
- 预编译 SQL/占位符防注入；输出做 XSS 处理
- 敏感字段脱敏；密钥安全存储（KMS、Vault 等）

## API 与返回值
- Controller 统一返回结构（例如 `CommonResponse<T>`）与错误码体系
- 明确幂等性与防重策略（如 `traceId`和`requestId`）；必要时限流/降级

## 代码组织
- 单一职责；方法短小（建议 <80 行），复杂逻辑拆分
- 使用卫语句减少嵌套；消除魔法数字/字符串（提取为常量或枚举）

## 测试
- 单元测试覆盖核心与边界；Mock 外部依赖
- 集成测试验证端到端流程；缺陷引入回归用例
- 使用 AssertJ 进行流畅断言；使用 `@MockBean` 或 `@Mock` 模拟依赖
- 测试覆盖率目标：核心业务逻辑 ≥ 80%，工具类 ≥ 90%

## 质量检查

### 即时检查要求
- **路径验证**：创建文件后立即验证文件路径是否正确
- **包名检查**：确认包名与目录结构一致，避免拼写错误
- **内容验证**：检查文件内容是否符合预期和规范
- **依赖检查**：验证导入语句和依赖关系正确
- **编译检查**：确保生成的代码能够正常编译
- **语法检查**：验证Java语法正确性
- **命名检查**：确认类名、方法名、变量名符合规范
- **注解检查**：验证注解使用正确和完整

### 阶段性检查要求
- **结构一致性**：确保项目结构符合规范
- **命名一致性**：验证所有命名符合项目约定
- **依赖完整性**：检查所有必要的依赖都已正确配置
- **功能完整性**：确保模块功能完整且符合需求
- **包结构检查**：验证包结构符合设计规范
- **文件组织检查**：确保文件放置在正确的目录

### 错误处理要求
- **主动发现**：及时发现和识别错误
- **立即修复**：发现错误后立即进行修复
- **清理工作**：删除不必要的文件和目录
- **验证修复**：修复后验证问题是否解决
- **用户告知**：及时告知用户修复情况
- **仔细操作**：创建文件时仔细检查路径和内容
- **重复验证**：重要操作后进行重复验证

### 质量保证流程
1. **需求分析** → 2. **设计规划** → 3. **规则文件检查** → 4. **目录结构创建** → 5. **基础类创建** → 6. **具体类创建** → 7. **即时检查** → 8. **内容验证** → 9. **阶段性检查** → 10. **错误修复** → 11. **最终验证**

### 强制检查清单
- [ ] 是否严格按照 `project.mdc` 创建目录结构
- [ ] 是否严格按照 `common-request.mdc` 创建基础类
- [ ] 是否严格按照 `request.mdc` 创建请求类
- [ ] 是否严格按照 `response.mdc` 创建响应类
- [ ] 是否严格按照 `entity.mdc` 创建实体类
- [ ] 是否严格按照 `mapper.mdc` 创建Mapper接口
- [ ] 文件路径正确
- [ ] 包名与目录结构一致
- [ ] 文件内容完整且正确
- [ ] 导入语句正确
- [ ] 命名符合规范
- [ ] 注解使用正确
- [ ] 代码能够编译
- [ ] 功能符合需求
- [ ] 没有遗留错误文件
- [ ] 项目结构一致

### 规则执行验证
- [ ] 是否创建了 `entity/` 目录（与controller同级，而不是在dao下）
- [ ] 是否创建了 `mapper/` 目录（与controller同级，而不是在dao下）
- [ ] 是否创建了 `vo/request/` 和 `vo/response/` 目录
- [ ] 是否避免了创建 `common/` 目录
- [ ] 是否避免了创建 `dao/entity/` 和 `dao/mapper/` 目录
- [ ] 是否遵循"按需创建"原则（只有当需要在目录中创建文件时才创建该目录）
- [ ] 是否首先创建了 `CommonRequest` 基础类
- [ ] 是否首先创建了 `CommonResponse` 基础类
- [ ] 请求类是否继承了 `CommonRequest`
- [ ] 响应类是否继承了 `CommonResponse`

## 日志切面要求
- **必须创建**：全局日志切面类
- **切面功能**：记录请求响应、执行时间、异常信息
- **日志格式**：统一的日志格式
- **日志级别**：合理的日志级别配置

## 日志切面检查点
- [ ] 是否创建了日志切面类
- [ ] 是否记录了请求响应
- [ ] 是否记录了执行时间
- [ ] 是否记录了异常信息

## 进一步阅读
- 事务、日志、异常、切面：`04-conventions/logging-aspect.mdc`、`04-conventions/exception-handler.mdc`
- Controller 返回与校验：`04-conventions/controller.mdc`、`04-conventions/validation.mdc`
- Service/DAO 实践：`04-conventions/service.mdc`、`04-conventions/service-impl.mdc`、`04-conventions/mapper.mdc`
- DTO/VO 设计：`04-conventions/request.mdc`、`04-conventions/response.mdc`
- 实体与常量/枚举：`04-conventions/entity.mdc`、`04-conventions/constants.mdc`、`04-conventions/enum.mdc`
- 应用配置与主类：`04-conventions/spring-config.mdc`、`04-conventions/application.mdc`

## 相关基础规范
- 命名规范：`03-coding/naming.mdc`
- 代码风格：`03-coding/code-style.mdc`
- 单元测试：`03-coding/testing.mdc`
- 异常处理：`03-coding/exceptions.mdc`