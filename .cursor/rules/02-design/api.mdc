---
description: API 设计规范（REST、URL、HTTP方法、状态码、请求/响应、错误处理），适用于所有 Spring Boot 项目。
globs:
alwaysApply: true
layer: L2
allowedReferences: [L2, L3, L4]
---

# API 设计规范

## RESTful 原则
- 资源导向：面向资源建模，避免动词化路径（如 `/api/v1/users` 而非 `/getUsers`）
- 统一接口：仅使用 GET 和 POST 两种 HTTP 方法（团队规范）
- 版本控制：推荐 URL 路径版本（`/api/v1/...`），必要时支持 Header 版本

## URL 设计
- 资源命名：名词、复数、小写、连字符（`/api/v1/user-profiles`）
- 路径结构：`/api/{version}/{resource}/{id}/sub-resources/{subId}`

## HTTP 方法
- GET：用于简单查询（幂等）。当查询参数较多、需要复杂过滤或传输结构化条件时，改用 POST 并在请求体中提交查询条件
- POST：用于所有修改类操作（创建、更新、部分更新、删除），以及复杂查询

## 状态码
- 2xx：成功（`200 OK`、`201 Created`、`204 No Content`）
- 4xx：客户端错误（`400 Bad Request`、`401`、`403`、`404`）
- 5xx：服务端错误（`500 Internal Server Error` 等）

## 请求与响应
- 统一响应模型（`CommonResponse<T>`），字段：`code:String(13)`、`msg:String`、`data:T`
- 分页响应模型（`CommonPageResponse<T>`），字段：`total:long`、`pageNumber:int`、`pageSize:int`、`list:List<T>`
- Header 规范：`Accept`、`Authorization` 等明确必选/可选

## 错误处理
- 错误码体系：通用码 + 业务码，枚举集中管理（码值为 13 位字符串）
- 错误响应：与统一响应模型一致（`code`、`msg`）
- 全局异常处理：捕获并映射为标准错误响应，记录上下文与追踪信息

## 进一步阅读
- 详细规范与示例：`common/03-api.mdc`
- 相关代码规则：
  - 控制器：`04-conventions/controller.mdc`
  - 校验：`04-conventions/validation.mdc`
  - 响应模型：`04-conventions/response.mdc`