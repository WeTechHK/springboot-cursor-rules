# 代码质量规范

> **文件说明**：Spring Boot 项目的代码质量规范，包括设计原则、代码组织、质量检查、性能优化和安全编码。

## 代码设计原则

### SOLID原则
```java
// 单一职责原则 (SRP)
@Service
public class UserValidationService {
    // 只负责用户验证
    public boolean validateUser(CreateUserRequest request) {
        // 验证逻辑
    }
}

@Service
public class UserProcessingService {
    // 只负责用户处理
    public UserResponse processUser(CreateUserRequest request) {
        // 处理逻辑
    }
}

// 开闭原则 (OCP)
public interface UserService {
    UserResponse getUserById(Long userId);
}

@Service
public class UserServiceImpl implements UserService {
    @Override
    public UserResponse getUserById(Long userId) {
        // 基础实现
    }
}

@Service
public class CachedUserServiceImpl implements UserService {
    private final UserService userService;
    
    @Override
    public UserResponse getUserById(Long userId) {
        // 带缓存的实现，对扩展开放，对修改关闭
        return userService.getUserById(userId);
    }
}
```

### DRY原则（Don't Repeat Yourself）
```java
// 不好的设计：重复代码
@Service
public class UserService {
    
    public UserResponse createUser(CreateUserRequest request) {
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("用户名不能为空");
        }
        if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {
            throw new IllegalArgumentException("邮箱不能为空");
        }
        // 处理逻辑
    }
    
    public UserResponse updateUser(UpdateUserRequest request) {
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("用户名不能为空");
        }
        if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {
            throw new IllegalArgumentException("邮箱不能为空");
        }
        // 处理逻辑
    }
}

// 好的设计：提取公共方法
@Service
public class UserService {
    
    public UserResponse createUser(CreateUserRequest request) {
        validateUserRequest(request);
        // 处理逻辑
    }
    
    public UserResponse updateUser(UpdateUserRequest request) {
        validateUserRequest(request);
        // 处理逻辑
    }
    
    private void validateUserRequest(UserRequest request) {
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("用户名不能为空");
        }
        if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {
            throw new IllegalArgumentException("邮箱不能为空");
        }
    }
}
```

### KISS原则（Keep It Simple, Stupid）
```java
// 不好的设计：过度复杂
public UserResponse getUserById(Long userId) {
    Optional<UserEntity> userOptional = userRepository.findById(userId);
    if (userOptional.isPresent()) {
        UserEntity user = userOptional.get();
        UserResponse response = new UserResponse();
        response.setId(user.getId());
        response.setName(user.getName());
        response.setEmail(user.getEmail());
        response.setCreateTime(user.getCreateTime());
        response.setUpdateTime(user.getUpdateTime());
        return response;
    } else {
        throw new UserNotFoundException("用户不存在");
    }
}

// 好的设计：简单明了
public UserResponse getUserById(Long userId) {
    UserEntity user = userRepository.findById(userId)
        .orElseThrow(() -> new UserNotFoundException("用户不存在"));
    return convertToResponse(user);
}
```

## 代码组织规范

### 包结构设计
```java
// 按功能分层
com.example.user.controller     # 控制器层
com.example.user.service        # 服务层
com.example.user.dao           # 数据访问层
com.example.user.vo            # 视图对象

// 按业务分包
com.example.user               # 用户模块
com.example.order              # 订单模块
com.example.product            # 产品模块

// 混合分包（推荐）
com.example.user.controller
com.example.user.service
com.example.user.dao
com.example.user.vo
```

### 类设计规范
```java
// 类名清晰表达职责
public class UserService { }           // 用户服务
public class UserValidator { }         // 用户验证器
public class UserConverter { }         // 用户转换器

// 方法名清晰表达功能
public UserResponse getUserById(Long userId) { }      // 根据ID获取用户
public List<UserResponse> getUsersByRole(String role) { }  // 根据角色获取用户
public void validateUserRequest(CreateUserRequest request) { }  // 验证用户请求
```

### 方法设计规范
```java
// 方法长度控制在50行以内
public UserResponse createUser(CreateUserRequest request) {
    // 1. 参数验证
    validateUserRequest(request);
    
    // 2. 业务逻辑
    UserEntity user = convertToEntity(request);
    user.setCreateTime(LocalDateTime.now());
    
    // 3. 数据保存
    UserEntity savedUser = userRepository.save(user);
    
    // 4. 返回结果
    return convertToResponse(savedUser);
}

// 方法参数不超过5个
public UserResponse createUser(String name, String email, String phone) {
    // 好的设计：参数少且清晰
}

public UserResponse createUser(CreateUserRequest request) {
    // 更好的设计：使用对象封装参数
}
```

## 代码质量检查

### 代码审查清单
```java
// 代码逻辑检查
- [ ] 业务逻辑是否正确
- [ ] 异常处理是否完善
- [ ] 边界条件是否考虑
- [ ] 性能是否有问题

// 代码规范检查
- [ ] 命名是否清晰
- [ ] 注释是否完整
- [ ] 格式是否统一
- [ ] 是否有重复代码

// 安全性检查
- [ ] 输入验证是否充分
- [ ] SQL注入是否防护
- [ ] XSS攻击是否防护
- [ ] 敏感信息是否保护
```

### 静态代码分析
```java
// 使用工具进行静态分析
// 1. SonarQube
// 2. SpotBugs
// 3. PMD
// 4. Checkstyle

// 配置示例
<plugin>
    <groupId>com.github.spotbugs</groupId>
    <artifactId>spotbugs-maven-plugin</artifactId>
    <version>4.7.3.0</version>
</plugin>
```

### 测试覆盖
```java
// 单元测试
@Test
public void testGetUserById() {
    // Given
    Long userId = 1L;
    UserEntity user = new UserEntity();
    user.setId(userId);
    user.setName("张三");
    
    when(userRepository.findById(userId)).thenReturn(Optional.of(user));
    
    // When
    UserResponse result = userService.getUserById(userId);
    
    // Then
    assertThat(result.getId()).isEqualTo(userId);
    assertThat(result.getName()).isEqualTo("张三");
}

// 集成测试
@SpringBootTest
@TestPropertySource(properties = {
    "spring.datasource.url=jdbc:h2:mem:testdb"
})
class UserControllerIntegrationTest {
    
    @Autowired
    private TestRestTemplate restTemplate;
    
    @Test
    void testCreateUser() {
        CreateUserRequest request = new CreateUserRequest();
        request.setName("张三");
        request.setEmail("zhangsan@example.com");
        
        ResponseEntity<UserResponse> response = restTemplate.postForEntity(
            "/api/v1/users", request, UserResponse.class);
        
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
    }
}
```

## 性能优化规范

### 数据库查询优化
```java
// 避免N+1查询问题
@Repository
public class UserRepository {
    
    // 不好的设计：N+1查询
    public List<User> getUsersWithOrders() {
        List<User> users = findAll();
        for (User user : users) {
            List<Order> orders = orderRepository.findByUserId(user.getId());
            user.setOrders(orders);
        }
        return users;
    }
    
    // 好的设计：批量查询
    @Query("SELECT u FROM User u LEFT JOIN FETCH u.orders")
    public List<User> getUsersWithOrders();
}
```

### 缓存使用
```java
@Service
public class UserService {
    
    @Cacheable(value = "users", key = "#userId")
    public UserResponse getUserById(Long userId) {
        return userRepository.findById(userId)
            .map(this::convertToResponse)
            .orElseThrow(() -> new UserNotFoundException("用户不存在"));
    }
    
    @CacheEvict(value = "users", key = "#user.id")
    public UserResponse updateUser(UserEntity user) {
        UserEntity updatedUser = userRepository.save(user);
        return convertToResponse(updatedUser);
    }
}
```

### 异步处理
```java
@Service
public class UserService {
    
    @Async
    public CompletableFuture<Void> sendWelcomeEmail(String email) {
        emailService.sendWelcomeEmail(email);
        return CompletableFuture.completedFuture(null);
    }
    
    @Async
    public CompletableFuture<Void> logUserActivity(Long userId, String activity) {
        logService.logActivity(userId, activity);
        return CompletableFuture.completedFuture(null);
    }
}
```

## 安全编码规范

### 输入验证
```java
@Service
public class UserService {
    
    public UserResponse createUser(CreateUserRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("请求参数不能为空");
        }
        
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("用户名不能为空");
        }
        
        if (request.getEmail() == null || !isValidEmail(request.getEmail())) {
            throw new IllegalArgumentException("邮箱格式不正确");
        }
        
        return processUser(request);
    }
    
    private boolean isValidEmail(String email) {
        return email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$");
    }
}
```

### SQL注入防护
```java
@Repository
public class UserRepository {
    
    // 不好的设计：字符串拼接
    public List<User> findUsersByName(String name) {
        String sql = "SELECT * FROM users WHERE name = '" + name + "'";
        return jdbcTemplate.query(sql, userRowMapper);
    }
    
    // 好的设计：参数化查询
    public List<User> findUsersByName(String name) {
        String sql = "SELECT * FROM users WHERE name = ?";
        return jdbcTemplate.query(sql, new Object[]{name}, userRowMapper);
    }
    
    // 使用JPA方法查询
    public List<User> findByName(String name) {
        return userRepository.findByName(name);
    }
}
```

### XSS防护
```java
@RestController
public class UserController {
    
    @PostMapping("/users")
    public ResponseEntity<UserResponse> createUser(@RequestBody CreateUserRequest request) {
        String sanitizedName = sanitizeHtml(request.getName());
        request.setName(sanitizedName);
        
        UserResponse response = userService.createUser(request);
        return ResponseEntity.ok(response);
    }
    
    private String sanitizeHtml(String input) {
        return Jsoup.clean(input, Whitelist.none());
    }
}
```

## 检查清单

### 代码质量检查
- [ ] 是否遵循SOLID原则
- [ ] 是否有重复代码
- [ ] 方法是否简洁明了
- [ ] 命名是否清晰

### 性能检查
- [ ] 数据库查询是否优化
- [ ] 是否使用了缓存
- [ ] 是否有内存泄漏
- [ ] 响应时间是否合理

### 安全检查
- [ ] 输入验证是否充分
- [ ] SQL注入是否防护
- [ ] XSS攻击是否防护
- [ ] 敏感信息是否保护

