---
description: 编码实践规范（依赖注入、异常、日志、事务、性能、安全、API返回、组织、测试），适用于所有 Spring Boot 项目。
globs:
alwaysApply: true
layer: L3
allowedReferences: [L3, L4]
---

# 编码规范

## 依赖注入（DI）
- 必须使用 `@Autowired` 字段注入（统一风格，便于快速接入与维护）
- 不使用构造器注入，除非规范或场景另有明确说明（例如特殊生命周期或必须依赖校验）
- 可选依赖请通过 `@Autowired(required = false)`、`@Nullable` 或 `ObjectProvider<T>` 处理，避免 NPE
- 避免循环依赖；如出现请重构依赖关系或通过事件/接口解耦

## 异常处理
- 使用具体异常类型；业务异常统一封装（如 `BusinessException`）
- 异常信息明确、可定位；禁止空 `catch`
- 数据访问异常转换为领域异常，并记录上下文

## 日志记录
- 在关键入口、核心步骤、异常处记录日志
- 包含必要上下文信息（主体、动作、主键、结果、耗时）；禁止输出敏感信息

## 事务与数据库
- 合理使用 `@Transactional`；注意同类内部自调用导致事务失效
- 避免 N+1 查询；优先批量操作与分页
- 限制单次返回规模；I/O 设置超时与重试策略

## 性能优化
- 避免无谓对象创建与反射；热点路径加缓存（如 `@Cacheable`）
- 合理的数据结构与算法；压测评估瓶颈并针对性优化

## 安全编码
- 所有输入校验（`@Valid` + 分组校验）；参数对象尽量不可变
- 预编译 SQL/占位符防注入；输出做 XSS 处理
- 敏感字段脱敏；密钥安全存储（KMS、Vault 等）

## API 与返回值
- Controller 统一返回结构（例如 `CommonResponse<T>`）与错误码体系
- 明确幂等性与防重策略（如 `traceId`和`requestId`）；必要时限流/降级

## 代码质量要求（强制）

### 生产级代码标准
- **禁止TODO标记**：不允许在代码中使用 `// TODO`、`// FIXME` 等标记
- **禁止Mock数据**：不允许返回硬编码的假数据或占位符
- **禁止简化实现**：所有业务逻辑必须完整实现，不允许跳过关键步骤
- **完整依赖生成**：依赖的工具类、配置类必须同时生成，不能引用不存在的类
- **符合生产环境标准**：代码必须可编译、可运行、可测试

### 示例

**❌ 错误示例**：
```java
public String generateToken(User user) {
    // TODO: 实现真实的JWT生成
    return "fake-token-12345";  // Mock数据
}
```

**✅ 正确示例**：
```java
@Autowired
private JwtUtil jwtUtil;  // 必须同时生成JwtUtil工具类

public String generateToken(User user) {
    return jwtUtil.generateToken(user);  // 完整实现
}
```

## 代码组织
- 单一职责；方法短小（建议 <80 行），复杂逻辑拆分
- 使用卫语句减少嵌套；消除魔法数字/字符串（提取为常量或枚举）

## 测试
- 单元测试覆盖核心与边界；Mock 外部依赖
- 集成测试验证端到端流程；缺陷引入回归用例
- 使用 AssertJ 进行流畅断言；使用 `@MockBean` 或 `@Mock` 模拟依赖
- 测试覆盖率目标：核心业务逻辑 ≥ 80%，工具类 ≥ 90%

## 进一步阅读
- 事务、日志、异常、切面：`04-conventions/logging-aspect.mdc`、`04-conventions/exception-handler.mdc`
- Controller 返回与校验：`04-conventions/controller.mdc`、`04-conventions/validation.mdc`
- Service/DAO 实践：`04-conventions/service.mdc`、`04-conventions/service-impl.mdc`、`04-conventions/mapper.mdc`
- DTO/VO 设计：`04-conventions/request.mdc`、`04-conventions/response.mdc`
- 实体与常量/枚举：`04-conventions/entity.mdc`、`04-conventions/constants.mdc`、`04-conventions/enum.mdc`
- 应用配置与主类：`04-conventions/spring-config.mdc`、`04-conventions/application.mdc`
- 工具类：`04-conventions/utility.mdc`

## 相关基础规范
- 命名规范：`03-coding/naming.mdc`
- 代码风格：`03-coding/code-style.mdc`
- 单元测试：`03-coding/testing.mdc`
- 异常处理：`03-coding/exceptions.mdc`
