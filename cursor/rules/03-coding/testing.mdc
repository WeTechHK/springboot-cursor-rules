---
description: 单元测试规范（测试结构、Mock使用、断言、覆盖率、命名、组织），适用于所有 Spring Boot 项目。
globs:
alwaysApply: true
layer: L3
allowedReferences: [L3, L4]
---

# 单元测试规范

## 适用范围
定义所有Spring Boot项目的单元测试规范，包括测试结构、Mock使用、断言、覆盖率等。

## 核心规则

### 强制要求（MUST）
- 每个Controller、Service、Mapper都必须有对应的测试类
- 所有公共方法都必须有测试用例
- 核心业务逻辑覆盖率 ≥ 80%
- 必须使用AAA模式（Arrange-Act-Assert）
- 必须使用AssertJ进行断言
- 必须正确处理继承关系中的链式调用问题
- 必须使用正确的对象创建和属性设置方法

### 禁止要求（MUST NOT）
- 禁止跳过测试代码生成
- 禁止在测试类中使用TODO标记
- 禁止使用过时断言方法
- 禁止在继承关系中使用链式调用（会导致类型转换错误）
- 禁止在测试代码中使用可能导致编译错误的链式调用

### 可选要求（MAY）
- 可以使用@MockBean或@Mock模拟依赖
- 可以使用Builder模式创建测试数据
- 可以使用@SpringBootTest进行集成测试
- 可以使用分步设置对象属性的方法
- 可以使用构造函数创建对象

## 测试代码编写规范

### 对象创建和属性设置
**正确做法**：
```java
// 创建对象
SearchStudentRequest request = new SearchStudentRequest();
// 分步设置属性
request.setClassId(1L);
request.setKeyword("张三");
request.setIsEnabled(true);
request.setPageNumber(1);
request.setPageSize(10);
```

**错误做法**：
```java
// 避免在继承关系中使用链式调用
SearchStudentRequest request = new SearchStudentRequest()
    .setClassId(1L)  // 编译错误：返回类型不匹配
    .setKeyword("张三");
```

### 继承关系处理
- 当请求类继承自 `CommonPageRequest` 时，避免使用链式调用
- 使用分步设置属性的方法
- 确保类型安全，避免编译错误

## 进一步阅读
- 具体测试类型的实现：
  - `04-conventions/controller.mdc`
  - `04-conventions/service.mdc`
  - `04-conventions/service-impl.mdc`
  - `04-conventions/mapper.mdc`
  - `04-conventions/entity.mdc`
  - `04-conventions/utility.mdc`
  - `04-conventions/validation.mdc`

- 相关基础规则索引：
  - 命名规则：`03-coding/naming.mdc`
  - 代码风格：`03-coding/code-style.mdc`
  - 编码实践：`03-coding/coding.mdc`