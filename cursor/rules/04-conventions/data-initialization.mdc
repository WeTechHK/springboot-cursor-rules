---
description: 数据初始化规范，定义data.sql文件编写和测试数据可用性要求
layer: L4
allowedReferences: [L4]
---

# 数据初始化编码约定

## 适用范围
定义`data.sql`测试数据初始化文件的编写规范，确保测试数据可用。

## 核心规则

### 强制要求（MUST）
- 所有初始化数据必须真实可用
- 所有加密/哈希值必须能通过验证
- 关联数据必须完整（外键关系）
- 必须使用真实的BCrypt哈希
- 位置：`src/main/resources/sql/` 目录下

### 禁止要求（MUST NOT）
- 禁止使用示例值/占位符
- 禁止使用无效的哈希值
- 禁止在data.sql中包含DDL语句
- 禁止在schema.sql中包含DML语句
- 禁止使用明文密码

### 可选要求（MAY）
- 可以使用ON DUPLICATE KEY UPDATE
- 可以按业务模块分组
- 可以使用SQL函数生成时间戳

## 完整代码模板

### 文件结构
- `schema.sql` - DDL语句（建表语句）
- `data.sql` - DML语句（初始化数据）

### 完整实现模板
```sql
-- data.sql
-- 学生管理系统初始化数据
-- 数据库：soop
-- 说明：此文件包含系统运行所需的初始化数据

-- ========================================
-- 初始化用户数据
-- ========================================
-- 说明：系统默认管理员和测试用户
-- 数据量：5条记录
-- 所有用户密码均为 Pass@1234
-- 哈希算法：BCrypt（轮次10）

INSERT INTO t_users (id, username, password_hash, email, role, is_enabled, create_time, update_time) VALUES
-- 管理员账号（密码：Pass@1234）
(1, 'admin', '$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy', 'admin@example.com', 'ADMIN', 1, NOW(), NOW()),
-- 教师账号（密码：Pass@1234）
(2, 'teacher01', '$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy', 'teacher01@example.com', 'TEACHER', 1, NOW(), NOW()),
-- 学生账号（密码：Pass@1234）
(3, 'student01', '$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy', 'student01@example.com', 'STUDENT', 1, NOW(), NOW()),
(4, 'student02', '$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy', 'student02@example.com', 'STUDENT', 1, NOW(), NOW()),
(5, 'student03', '$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy', 'student03@example.com', 'STUDENT', 1, NOW(), NOW())
ON DUPLICATE KEY UPDATE username=VALUES(username);

-- ========================================
-- 初始化课程数据
-- ========================================
-- 说明：系统默认课程数据
-- 数据量：3条记录
-- status: 0=草稿, 1=发布, 2=下线

INSERT INTO t_courses (id, name, description, teacher_id, status, create_time, update_time) VALUES
(1, 'Java编程基础', 'Java编程语言基础课程', 2, 1, NOW(), NOW()),
(2, 'Python编程基础', 'Python编程语言基础课程', 2, 1, NOW(), NOW()),
(3, '数据结构与算法', '计算机科学基础课程', 2, 0, NOW(), NOW())
ON DUPLICATE KEY UPDATE name=VALUES(name);

-- ========================================
-- 初始化选课数据
-- ========================================
-- 说明：学生选课关系数据
-- 数据量：6条记录

INSERT INTO t_enrollments (id, student_id, course_id, enrollment_date, status, create_time, update_time) VALUES
(1, 3, 1, NOW(), 1, NOW(), NOW()),
(2, 3, 2, NOW(), 1, NOW(), NOW()),
(3, 4, 1, NOW(), 1, NOW(), NOW()),
(4, 4, 2, NOW(), 1, NOW(), NOW()),
(5, 5, 1, NOW(), 1, NOW(), NOW()),
(6, 5, 3, NOW(), 1, NOW(), NOW())
ON DUPLICATE KEY UPDATE student_id=VALUES(student_id);

-- ========================================
-- 初始化成绩数据
-- ========================================
-- 说明：学生课程成绩数据
-- 数据量：4条记录

INSERT INTO t_grades (id, student_id, course_id, score, exam_date, create_time, update_time) VALUES
(1, 3, 1, 85, NOW(), NOW(), NOW()),
(2, 3, 2, 90, NOW(), NOW(), NOW()),
(3, 4, 1, 78, NOW(), NOW(), NOW()),
(4, 5, 1, 92, NOW(), NOW(), NOW())
ON DUPLICATE KEY UPDATE score=VALUES(score);
```

## 规则执行检查清单

### 生成前检查
- [ ] 所有初始化数据是否真实可用
- [ ] 所有加密/哈希值是否能通过验证
- [ ] 关联数据是否完整（外键关系）
- [ ] 是否使用了真实的BCrypt哈希
- [ ] 是否避免了使用示例值/占位符

### 生成中检查
- [ ] 是否按照规范定义数据
- [ ] 是否包含了必要的注释
- [ ] 是否遵循命名规范
- [ ] 是否避免了禁止的操作

### 生成后检查
- [ ] 是否通过SQL语法检查
- [ ] 是否包含了所有必要的数据
- [ ] 是否符合命名规范
- [ ] 是否满足功能要求

## 相关规则
本规则为L4层具体约定，已内化上层规范要求。
