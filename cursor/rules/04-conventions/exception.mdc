---
description: 定义业务异常与系统异常类的编码标准，包括错误码、消息与枚举映射
globs: **/src/main/java/**/exception/**Exception.java
layer: L4
allowedReferences: [L4]
---

# Exception 编码约定

## 适用范围
定义自定义异常类的实现规范，用于业务异常和系统异常的统一处理。

## 核心规则

### 强制要求（MUST）
- 必须继承 `RuntimeException`
- 必须使用 `@Getter` 注解
- 必须包含 `code` 和 `msg` 字段
- 必须提供基于 `ErrorCodeEnum` 的构造器
- 必须提供 code + msg 的构造器
- 类名必须以 `Exception` 结尾
- 位置：`exception` 包下

### 禁止要求（MUST NOT）
- 禁止包含敏感信息（密码、token）
- 禁止暴露实现细节（SQL、堆栈）
- 禁止使用其他父类

### 可选要求（MAY）
- 可以添加带 `cause` 的构造器
- 可以添加 JavaDoc 注释
- 可以添加自定义方法

## 完整代码模板

### 文件结构
- 包声明
- 导入语句
- 类声明
- 字段定义
- 构造器
- 方法实现

### 完整实现模板
```java
package com.edu.soop.exception;

import com.edu.soop.enums.ErrorCodeEnum;
import lombok.Getter;

/**
 * 业务异常类
 * 
 * @author system
 * @since 1.0.0
 */
@Getter
public class BusinessException extends RuntimeException {
    
    private final String code;
    private final String msg;
    
    /**
     * 基于错误码枚举构造
     */
    public BusinessException(ErrorCodeEnum errorCode) {
        super(errorCode.getMsg());
        this.code = errorCode.getCode();
        this.msg = errorCode.getMsg();
    }
    
    /**
     * 自定义错误码和消息
     */
    public BusinessException(String code, String msg) {
        super(msg);
        this.code = code;
        this.msg = msg;
    }
    
    /**
     * 带原始异常
     */
    public BusinessException(ErrorCodeEnum errorCode, Throwable cause) {
        super(errorCode.getMsg(), cause);
        this.code = errorCode.getCode();
        this.msg = errorCode.getMsg();
    }
}
```

## 规则执行检查清单

### 生成前检查
- [ ] 是否继承了 `RuntimeException`
- [ ] 是否使用了 `@Getter` 注解
- [ ] 是否包含了 `code` 和 `msg` 字段
- [ ] 是否提供了基于 `ErrorCodeEnum` 的构造器

### 生成中检查
- [ ] 是否按照规范定义字段
- [ ] 是否添加了必要的注释
- [ ] 是否包含了所有必要的构造器
- [ ] 是否遵循命名规范

### 生成后检查
- [ ] 是否通过编译检查
- [ ] 是否包含了所有必要的构造器
- [ ] 是否符合命名规范
- [ ] 是否满足功能要求

## 相关规则
- 错误码枚举: `04-conventions/error-code-enum.mdc`
- 全局处理: `04-conventions/exception-handler.mdc`