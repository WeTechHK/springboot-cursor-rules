---
description: 定义OpenAPI配置类的编码标准，包括Swagger UI配置、API文档配置和接口分组
globs: **/config/**OpenApiConfig.java
layer: L4
allowedReferences: [L4]
---

# OpenApiConfig 编码约定

## 适用范围
定义OpenAPI（Swagger）配置类的实现规范，用于生成API文档和提供Swagger UI访问。

## 核心规则

### 类定义
- `@Configuration` 标记配置类
- 类名：`OpenApiConfig`
- 位置：`config` 包下
- 使用 Springdoc OpenAPI 3.x

### 必需配置
- API基本信息（标题、描述、版本）
- 联系信息（可选）
- 全局安全配置（JWT Token）

### 可选配置
- API分组
- 自定义路径过滤
- 全局响应示例

## 最小示例

```java
package com.edu.ssm.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.Components;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * OpenAPI配置类
 * 配置Swagger UI和API文档
 */
@Configuration
public class OpenApiConfig {
    
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("学生管理系统 API")
                        .description("学生管理系统后端接口文档")
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("开发团队")
                                .email("dev@example.com"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")
                                        .bearerFormat("JWT")
                                        .description("请输入JWT令牌")));
    }
}
```

## 带分组示例

```java
@Configuration
public class OpenApiConfig {
    
    @Bean
    public GroupedOpenApi publicApi() {
        return GroupedOpenApi.builder()
                .group("public")
                .pathsToMatch("/api/v1/auth/**")
                .build();
    }
    
    @Bean
    public GroupedOpenApi userApi() {
        return GroupedOpenApi.builder()
                .group("user")
                .pathsToMatch("/api/v1/users/**")
                .build();
    }
    
    @Bean
    public GroupedOpenApi courseApi() {
        return GroupedOpenApi.builder()
                .group("course")
                .pathsToMatch("/api/v1/courses/**")
                .build();
    }
    
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("学生管理系统 API")
                        .version("1.0.0"))
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")
                                        .bearerFormat("JWT")));
    }
}
```

## 配置项说明

### Info配置
- `title`：API文档标题（必需）
- `description`：API描述（推荐）
- `version`：API版本号（必需）
- `contact`：联系信息（可选）
- `license`：许可证信息（可选）

### SecurityScheme配置
- `type`：认证类型（HTTP、API Key、OAuth2等）
- `scheme`：认证方案（bearer、basic等）
- `bearerFormat`：令牌格式（JWT）
- `description`：认证说明

### GroupedOpenApi配置
- `group`：分组名称
- `pathsToMatch`：匹配路径模式
- `pathsToExclude`：排除路径模式（可选）

## application.yml配置

```yaml
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
```

## 访问地址
- Swagger UI：`http://localhost:8080/swagger-ui.html`
- API Docs：`http://localhost:8080/api-docs`
- API Docs (JSON)：`http://localhost:8080/api-docs.json`

## 最佳实践
- 提供清晰的API标题和描述
- 配置JWT认证支持
- 生产环境可通过配置禁用Swagger UI
- 使用分组组织大型API
- 在Controller和方法上使用 `@Tag` 和 `@Operation` 注解

## 生产环境禁用

```yaml
# application-prod.yml
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false
```

## 相关规则
- 控制器注解: `04-conventions/controller.mdc`
- 应用配置: `04-conventions/spring-config.mdc`
