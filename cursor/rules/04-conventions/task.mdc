---
description: 定义定时任务类的编码标准，包括任务调度、配置管理、异常处理和性能监控规范
globs: **/src/main/java/**/task/*Task.java
layer: L4
allowedReferences: [L4]
---

# Task 编码约定

## 适用范围
定义定时任务类的实现规范，使用Spring的`@Scheduled`注解实现任务调度。

## 核心规则

### 强制要求（MUST）
- 必须使用 `@Component` 注册为Spring组件
- 必须使用 `@Slf4j` 进行日志记录
- 类名必须以 `Task` 结尾
- 必须添加 JavaDoc 注释
- 位置：`task` 包下

### 禁止要求（MUST NOT）
- 禁止长时间阻塞操作
- 禁止任务中断（必须处理异常）
- 禁止非幂等操作

### 可选要求（MAY）
- 可以使用 `@Scheduled` 定义调度策略
- 可以使用 `fixedDelay` 或 `fixedRate`
- 可以使用 `initialDelay` 设置初始延迟
- 可以使用SpEL表达式读取配置

## 完整代码模板

### 文件结构
- 包声明
- 导入语句
- 类声明
- 方法定义

### 完整实现模板
```java
package com.edu.soop.task;

import com.edu.soop.service.UserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

/**
 * 数据同步定时任务
 * 负责定期同步用户数据
 *
 * @author system
 * @since 1.0.0
 */
@Component
@Slf4j
public class DataSyncTask {

    @Autowired
    private UserService userService;

    /**
     * 每5分钟执行一次用户数据同步
     * 启动后1分钟开始执行
     */
    @Scheduled(
        fixedDelay = 5 * 60 * 1000,  // 5分钟
        initialDelay = 60 * 1000      // 启动后1分钟开始
    )
    public void syncUserData() {
        long startTime = System.currentTimeMillis();

        try {
            log.info("========== 用户数据同步开始 ==========");

            // 执行同步逻辑
            int syncCount = userService.syncUsersFromExternalSystem();

            long timeCost = System.currentTimeMillis() - startTime;
            log.info("用户数据同步完成: 同步{}条, 耗时{}ms", syncCount, timeCost);

        } catch (Exception e) {
            log.error("用户数据同步失败", e);
            // 不抛出异常，避免任务中断
        }
    }

    /**
     * 每天凌晨2点执行报表生成
     */
    @Scheduled(cron = "0 0 2 * * ?")
    public void generateDailyReport() {
        long startTime = System.currentTimeMillis();

        try {
            log.info("========== 日报生成开始 ==========");

            // 执行报表生成逻辑
            boolean success = userService.generateDailyReport();

            long timeCost = System.currentTimeMillis() - startTime;
            log.info("日报生成完成: 成功={}, 耗时{}ms", success, timeCost);

        } catch (Exception e) {
            log.error("日报生成失败", e);
            // 不抛出异常，避免任务中断
        }
    }

    /**
     * 清理过期数据
     * 执行间隔通过配置文件控制
     */
    @Scheduled(fixedDelayString = "${task.cleanup.interval:3600000}")
    public void cleanupExpiredData() {
        long startTime = System.currentTimeMillis();

        try {
            log.info("========== 清理过期数据开始 ==========");

            // 执行清理逻辑
            int deletedCount = userService.cleanupExpiredData();

            long timeCost = System.currentTimeMillis() - startTime;
            log.info("清理过期数据完成: 删除{}条, 耗时{}ms", deletedCount, timeCost);

        } catch (Exception e) {
            log.error("清理过期数据失败", e);
            // 不抛出异常，避免任务中断
        }
    }
}
```

## 规则执行检查清单

### 生成前检查
- [ ] 是否使用了 `@Component` 注册为Spring组件
- [ ] 是否使用了 `@Slf4j` 进行日志记录
- [ ] 类名是否以 `Task` 结尾
- [ ] 是否添加了 JavaDoc 注释
- [ ] 是否避免了长时间阻塞操作
- [ ] 是否避免了任务中断

### 生成中检查
- [ ] 是否按照规范定义方法
- [ ] 是否包含了必要的异常处理
- [ ] 是否遵循命名规范
- [ ] 是否避免了禁止的操作

### 生成后检查
- [ ] 是否通过编译检查
- [ ] 是否包含了所有必要的功能
- [ ] 是否符合命名规范
- [ ] 是否满足功能要求

## 相关规则
- 启动类: `04-conventions/application.mdc`
