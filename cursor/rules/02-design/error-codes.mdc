---
description: 定义错误码的设计原则、编码规则和分类体系
alwaysApply: true
layer: L2
allowedReferences: [L2, L3, L4]
---

# 错误码设计规范

## 适用范围
本规范定义系统错误码的设计原则，适用于所有API响应的状态码设计。

## 核心规则

### 成功码
- 成功时统一返回字符串 `"0"`
- **禁止**：使用其他任何值表示成功（如"200"、"OK"、"success"等）

### 失败码  
- 失败时返回13位字符串
- 格式：`[子系统4位][类型1位][预留2位][业务码6位]`

## 13位错误码编码规则

### 位置1-4：子系统编号（4位）
- 数字或大写字母
- 由组织统一分配
- 全局唯一

### 位置5：错误类型（1位）
| 类型 | 代码 | 说明 | 示例场景 |
|------|------|------|---------|
| 业务错误 | B | 业务规则限制 | 余额不足、状态不允许 |
| 技术错误 | T | 系统技术问题 | 配置错误、网络失败 |
| 客户端错误 | C | 请求格式问题 | 参数非法、解析失败 |
| 结果未知 | U | 无法确定结果 | 超时、对账未明 |

### 位置6-7：预留位（2位）
- 默认填"00"
- 保留给框架扩展使用

### 位置8-13：业务码（6位）
- 仅数字
- 子系统内唯一
- 按功能模块分配

## 设计约束
- 全局唯一：错误码全系统唯一且稳定
- 语义清晰：错误消息人类可读
- 可追溯：维护完整的错误码对照表
- **禁止复用**：已定义的错误码不得改变含义

## 错误码示例
```
成功：        "0"
业务错误：    "1001B00000001" (用户名已存在)
技术错误：    "1001T00000001" (系统内部错误)
客户端错误：  "1001C00000001" (参数校验失败)
结果未知：    "1001U00000001" (请求超时)
```

## HTTP状态码映射
| 错误类型 | 建议HTTP状态码 |
|---------|---------------|
| 成功 | 200, 201 |
| 业务错误(B) | 400, 409 |
| 客户端错误(C) | 400, 401, 403, 404 |
| 技术错误(T) | 500, 502, 503 |
| 结果未知(U) | 504 |

## 相关规则
- 实现约定: `04-conventions/error-code-enum.mdc`
- 响应格式: `04-conventions/common-response.mdc`
