---
description: AI代码生成综合框架，基于设计文档+规则+上下文+最佳实践
layer: L0
allowedReferences: [L0, L1, L2, L3, L4]
alwaysApply: true
---

# AI代码生成框架

## 核心原则

```
设计文档 + 代码规则 + 上下文推理 + 技术实践 = 高质量代码
```

**优先级顺序**：
1. **04-conventions规则** > 2. **03-coding规则** > 3. **02-design规则** > 4. **01-structure规则** > 5. **设计文档** > 6. **技术实践** > 7. **通用规范**

**设计文档处理策略**：
- **有完整文档（90-100分）**：严格遵循设计文档，直接开始代码生成
- **文档基本完整（70-89分）**：遵循现有文档，补充缺失部分，确认后生成代码
- **文档不完整（50-69分）**：暂停生成，要求用户补充重要设计文档
- **文档严重缺失（0-49分）**：暂停生成，提供完整的设计文档模板和指导
- **无设计文档**：暂停生成，询问用户是否需要设计建议或提供设计文档模板

## 三阶段决策流程

### 阶段一：需求分析
**目标**：理解用户需求，确定技术方案

**输入**：用户指令
**输出**：需求分析报告、技术选型、生成计划、设计文档状态报告

**关键决策点**：
1. **需求类型识别**：新建项目 vs 功能扩展 vs 问题修复
2. **设计文档检查**：扫描 `doc/` 目录，评估完整性
3. **生成范围确定**：确定需要生成的文件和模块

**设计文档检查流程**：
1. **扫描设计文档**：检查 `doc/` 目录下的设计文档
2. **分析文档完整性**：评估是否包含以下关键部分：
   - 需求分析（功能需求、非功能需求）
   - 技术架构（技术栈、系统架构、模块划分）
   - 数据库设计（表结构、关系设计）
   - API设计（接口规范、数据格式）
   - 部署方案（环境配置、部署流程）
3. **计算完整性评分**：按照设计文档检查规则计算评分（0-100分）
4. **生成状态报告**：向用户明确报告设计文档状态和评分
5. **提供补充建议**：如果文档不完整，提供具体的补充建议
6. **等待用户确认**：根据评分结果决定是否继续生成或等待用户补充文档

**检查清单**：
- [ ] 用户需求是否明确？
- [ ] 设计文档是否存在？
- [ ] 设计文档是否完整？
- [ ] 是否需要补充设计文档？
- [ ] 生成范围是否确定？

### 阶段二：架构设计
**目标**：基于规则和最佳实践设计代码架构

**输入**：需求分析报告
**输出**：架构设计、文件清单、规则映射

**关键决策点**：
1. **规则加载**：按分层架构加载相关规则
2. **架构设计**：确定项目结构、模块划分、依赖关系
3. **文件规划**：列出所有需要生成的文件
4. **规则映射**：确定每个文件对应的规则

**检查清单**：
- [ ] 相关规则是否已加载？
- [ ] 项目架构是否设计完成？
- [ ] 文件清单是否完整？
- [ ] 规则映射是否明确？

### 阶段三：代码生成
**目标**：按阶段生成高质量代码

**输入**：架构设计、文件清单
**输出**：完整的可运行代码

**关键决策点**：
1. **生成顺序**：按依赖关系确定生成顺序
2. **质量检查**：每个文件生成后立即验证
3. **集成测试**：确保代码可编译运行
4. **错误处理**：发现问题立即修复

**检查清单**：
- [ ] 生成顺序是否正确？
- [ ] 每个文件是否通过验证？
- [ ] 代码是否可以编译运行？
- [ ] 是否通过集成测试？

## 五阶段代码生成流程

### 阶段1：项目准备
**目标**：建立项目基础架构

**生成内容**：
- 项目目录结构
- 基础配置文件
- 通用基础类

**生成顺序**：
1. 自动创建目录结构（参考 `01-structure/project.mdc`，无需用户授权和确认）
2. 生成 `settings.gradle` 和 `build.gradle`
3. 创建通用基础类：
   - `CommonResponse.java`
   - `CommonRequest.java`
   - `PageData.java`
   - `CommonPageRequest.java`

**验证标准**：
- [ ] 目录结构符合规范
- [ ] Gradle文件可正常构建
- [ ] 基础类继承关系正确

### 阶段2：应用配置
**目标**：建立应用启动和配置体系

**生成内容**：
- 应用启动类
- 配置类
- 异常处理体系

**生成顺序**：
1. `{AppName}Application.java` - 启动类
2. `OpenApiConfig.java` - OpenAPI配置
3. `ErrorCodeEnum.java` - 错误码枚举
4. `GlobalExceptionHandler.java` - 全局异常处理器
5. 其他配置类（如需要）

**验证标准**：
- [ ] 启动类命名正确
- [ ] 配置类注解完整
- [ ] 异常处理体系完整

### 阶段3：业务模块
**目标**：生成业务逻辑代码

**生成内容**：
- 实体类
- 数据访问层
- 业务逻辑层
- 控制器层

**生成顺序**（每个模块）：
1. `{Domain}Entity.java` - 实体类
2. `{Domain}Mapper.java` - Mapper接口
3. `{Domain}Request.java` - 请求DTO
4. `{Domain}Response.java` - 响应DTO
5. `{Domain}Service.java` - 服务接口
6. `{Domain}ServiceImpl.java` - 服务实现
7. `{Domain}Controller.java` - 控制器

**验证标准**：
- [ ] 实体类注解完整
- [ ] Mapper接口规范
- [ ] 服务层事务处理正确
- [ ] 控制器接口规范

### 阶段4：测试代码
**目标**：生成完整的测试代码

**生成内容**：
- 单元测试
- 集成测试
- 测试配置

**生成顺序**：
1. `{Domain}ControllerTest.java` - 控制器测试
2. `{Domain}ServiceImplTest.java` - 服务测试
3. `{Domain}MapperTest.java` - Mapper测试
4. `application-test.yml` - 测试配置

**验证标准**：
- [ ] 测试覆盖率 ≥ 80%
- [ ] 测试用例完整
- [ ] 测试配置正确

### 阶段5：集成验证
**目标**：确保代码质量和可运行性

**验证内容**：
- 代码编译
- 规范符合性
- 功能完整性
- 性能检查

**验证顺序**：
1. **语法验证**：代码可编译
2. **规范验证**：符合编码规范
3. **功能验证**：核心功能正常
4. **集成验证**：整体可运行

**验证标准**：
- [ ] 代码无编译错误
- [ ] 符合所有编码规范
- [ ] 核心功能测试通过
- [ ] 应用可正常启动

## 规则加载机制

### 规则执行优先级（强制要求）
**必须按照以下优先级执行规则，不允许偏离：**

1. **L4: 04-conventions（最高优先级）**
   - **强制要求**：必须严格执行，不允许偏离
   - **包含内容**：所有具体实现要求、注解要求、字段定义、方法实现
   - **执行原则**：完全按照规则文件要求生成代码，不允许任何偏离

2. **L3: 03-coding（次高优先级）**
   - **执行条件**：在满足L4的前提下执行
   - **包含内容**：通用编码规范、命名规范、代码风格
   - **执行原则**：补充L4未覆盖的通用规范

3. **L2: 02-design（中等优先级）**
   - **执行条件**：在满足前两个优先级的前提下执行
   - **包含内容**：设计标准、API规范、数据库设计
   - **执行原则**：提供设计指导，但不能违反具体实现规则

4. **L1: 01-structure（较低优先级）**
   - **执行条件**：在满足前三个优先级的前提下执行
   - **包含内容**：项目结构、技术栈定义
   - **执行原则**：提供项目框架指导

5. **L0: 00-interaction（最低优先级）**
   - **执行条件**：在满足前四个优先级的前提下执行
   - **包含内容**：AI角色定义、行为指导
   - **执行原则**：提供AI执行指导

### 规则冲突解决机制

#### 冲突类型
1. **规则文件之间的冲突**
2. **规则文件与设计文档的冲突**
3. **规则文件与通用规范的冲突**

#### 解决原则
1. **优先级高的规则覆盖优先级低的规则**
2. **具体规则覆盖通用规则**
3. **强制规则覆盖可选规则**
4. **L4规则具有最高优先级**

#### 解决流程
1. 识别冲突类型
2. 确定规则优先级
3. 应用解决原则
4. 验证解决结果

### 分层加载策略
基于分层架构，按以下顺序加载规则：

**L1层（项目结构）**：
- `01-structure/project.mdc` - 项目结构规范
- `01-structure/tech-stack.mdc` - 技术栈定义

**L2层（设计标准）**：
- `02-design/api.mdc` - API设计规范
- `02-design/database.mdc` - 数据库设计规范
- `02-design/error-codes.mdc` - 错误码规范
- `02-design/patterns.mdc` - 设计模式规范

**L3层（编码规范）**：
- `03-coding/code-style.mdc` - 代码格式规范
- `03-coding/naming.mdc` - 命名规范
- `03-coding/coding.mdc` - 编码实践规范
- `03-coding/exceptions.mdc` - 异常处理规范
- `03-coding/testing.mdc` - 测试规范

**L4层（具体约定）**：
**基础类**：
- `04-conventions/common-request.mdc` - 通用请求基类
- `04-conventions/common-response.mdc` - 通用响应基类
- `04-conventions/common-page-request.mdc` - 分页请求基类
- `04-conventions/page-data.mdc` - 分页数据封装类
- `04-conventions/error-code-enum.mdc` - 错误码枚举规范

**分层类**：
- `04-conventions/application.mdc` - 应用启动类规范
- `04-conventions/entity.mdc` - 实体类规范
- `04-conventions/mapper.mdc` - Mapper接口规范
- `04-conventions/service.mdc` - 服务接口规范
- `04-conventions/service-impl.mdc` - 服务实现类规范
- `04-conventions/controller.mdc` - 控制器规范
- `04-conventions/request.mdc` - 请求DTO规范
- `04-conventions/response.mdc` - 响应DTO规范

**工具类**：
- `04-conventions/exception.mdc` - 自定义异常规范
- `04-conventions/exception-handler.mdc` - 全局异常处理器规范
- `04-conventions/logging-aspect.mdc` - 日志切面规范
- `04-conventions/constants.mdc` - 常量类规范
- `04-conventions/enum.mdc` - 枚举类规范
- `04-conventions/utility.mdc` - 工具类规范
- `04-conventions/validation.mdc` - 校验器规范
- `04-conventions/task.mdc` - 定时任务规范

**配置类**：
- `04-conventions/spring-config.mdc` - Spring配置文件规范
- `04-conventions/gradle.mdc` - Gradle构建文件规范

### 规则执行检查清单（强制要求）

#### 生成前检查
- [ ] 是否读取了所有相关规则文件
- [ ] 是否理解了规则要求
- [ ] 是否确认了执行优先级
- [ ] 是否识别了潜在冲突

#### 生成中检查
- [ ] 是否按照规则要求生成代码
- [ ] 是否包含必要的注解
- [ ] 是否符合命名规范
- [ ] 是否遵循优先级原则

#### 生成后检查
- [ ] 是否通过规则符合性检查
- [ ] 是否包含必要的验证
- [ ] 是否满足功能要求
- [ ] 是否解决了所有冲突

## 统一验证框架

### 验证层级
1. **语法验证**：代码可编译，无语法错误
2. **规范验证**：符合编码规范和命名规范
3. **功能验证**：核心功能逻辑正确
4. **集成验证**：整体系统可运行

### 规则符合性检查（强制要求）

#### 自动检查
- 代码是否包含必要注解
- 字段定义是否符合规范
- 方法实现是否完整
- 命名是否符合规范

#### 手动检查
- 是否满足功能要求
- 是否包含必要的验证
- 是否符合最佳实践
- 是否遵循设计原则

#### 检查结果
- **通过**：代码符合所有规则要求
- **失败**：代码不符合规则要求，需要修改
- **警告**：代码基本符合要求，但有改进空间

### 验证标准
**语法验证**：
- [ ] Java代码无编译错误
- [ ] 配置文件格式正确
- [ ] 依赖关系正确

**规范验证**：
- [ ] 代码格式符合规范（4个空格缩进）
- [ ] 命名符合规范
- [ ] 注解使用正确
- [ ] 文件位置正确

**功能验证**：
- [ ] 核心业务逻辑正确
- [ ] 异常处理完整
- [ ] 数据验证正确
- [ ] 事务处理正确

**集成验证**：
- [ ] 应用可正常启动
- [ ] 接口可正常调用
- [ ] 数据库连接正常
- [ ] 测试用例通过

### 错误处理流程
1. **发现问题**：立即停止生成
2. **分析问题**：确定问题类型和原因
3. **修复问题**：删除错误文件，重新生成
4. **验证修复**：确保问题已解决
5. **继续生成**：从断点继续生成

## 质量标准

### 代码质量要求
- **可编译**：无编译错误
- **可运行**：能在Spring Boot中正常运行
- **规范性**：严格遵循编码规范
- **完整性**：包含错误处理、日志、验证
- **安全性**：输入校验、SQL防注入
- **性能**：避免N+1查询、合理使用缓存

### 测试质量要求
- **覆盖率**：核心业务逻辑 ≥ 80%
- **完整性**：包含正常和异常场景
- **可维护性**：测试代码清晰易懂
- **稳定性**：测试结果可重复

## 相关规则

- 角色定义: `00-interaction/role-definition.mdc`
- 设计文档检查: `00-interaction/design-document-check.mdc`
- 项目结构: `01-structure/project.mdc`
- 设计标准: `02-design/`
- 编码规范: `03-coding/`
- 文件约定: `04-conventions/`