# API 设计规范

> **文件说明**：本文档定义了 Spring Boot 项目中 API 设计的规范，包括以下内容：
> - RESTful API 设计原则（资源导向、统一接口、无状态、可缓存）
> - URL 设计规范（资源命名、路径结构、版本控制）
> - HTTP 方法使用（GET、POST、PUT、DELETE、PATCH）
> - 状态码规范（2xx 成功、3xx 重定向、4xx 客户端错误、5xx 服务器错误）
> - 请求响应格式（请求头、响应头、数据格式、分页处理）
> - 错误处理（错误码设计、错误信息格式、异常处理）
> 
> 遵循 RESTful 设计原则有助于构建清晰、一致的 API 接口。

## RESTful API 设计原则

### 资源导向
```java
// 好的设计：以资源为中心
GET    /api/v1/users           # 获取用户列表
GET    /api/v1/users/{id}      # 获取特定用户
POST   /api/v1/users           # 创建用户
PUT    /api/v1/users/{id}      # 更新用户
DELETE /api/v1/users/{id}      # 删除用户

// 不好的设计：以动作为中心
GET    /api/v1/getUsers
POST   /api/v1/createUser
POST   /api/v1/updateUser
POST   /api/v1/deleteUser
```

### 统一接口
```java
// 使用标准HTTP方法
@RestController
@RequestMapping("/api/v1/users")
public class UserController {
    
    @GetMapping
    public ResponseEntity<List<UserResponse>> getUsers() {
        // 获取用户列表
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<UserResponse> getUser(@PathVariable Long id) {
        // 获取特定用户
    }
    
    @PostMapping
    public ResponseEntity<UserResponse> createUser(@RequestBody CreateUserRequest request) {
        // 创建用户
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<UserResponse> updateUser(@PathVariable Long id, @RequestBody UpdateUserRequest request) {
        // 更新用户
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        // 删除用户
    }
}
```

## URL 设计规范

### 资源命名
```java
// 使用名词，避免动词
/api/v1/users              # 用户资源
/api/v1/orders             # 订单资源
/api/v1/products           # 产品资源

// 使用复数形式
/api/v1/users              # 正确
/api/v1/user               # 错误

// 使用小写字母和连字符
/api/v1/user-profiles      # 正确
/api/v1/userProfiles       # 错误
```

### 路径结构
```java
// 基本结构
/api/{version}/{resource}

// 示例
/api/v1/users
/api/v1/users/{id}
/api/v1/users/{id}/orders
/api/v1/users/{id}/orders/{orderId}
```

### 版本控制
```java
// URL路径版本控制（推荐）
/api/v1/users
/api/v2/users

// 请求头版本控制
Accept: application/vnd.api+json;version=1
Accept: application/vnd.api+json;version=2
```

## HTTP 方法使用

### GET - 查询操作
```java
@GetMapping("/users")
public ResponseEntity<List<UserResponse>> getUsers(
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "20") int size,
        @RequestParam(required = false) String name) {
    // 查询用户列表
}

@GetMapping("/users/{id}")
public ResponseEntity<UserResponse> getUser(@PathVariable Long id) {
    // 查询特定用户
}
```

### POST - 创建操作
```java
@PostMapping("/users")
public ResponseEntity<UserResponse> createUser(@RequestBody @Valid CreateUserRequest request) {
    // 创建用户
}

@PostMapping("/users/{id}/activate")
public ResponseEntity<Void> activateUser(@PathVariable Long id) {
    // 激活用户（非幂等操作）
}
```

### PUT - 更新操作
```java
@PutMapping("/users/{id}")
public ResponseEntity<UserResponse> updateUser(
        @PathVariable Long id, 
        @RequestBody @Valid UpdateUserRequest request) {
    // 更新用户（完整更新）
}
```

### DELETE - 删除操作
```java
@DeleteMapping("/users/{id}")
public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
    // 删除用户
}
```

### PATCH - 部分更新
```java
@PatchMapping("/users/{id}")
public ResponseEntity<UserResponse> patchUser(
        @PathVariable Long id, 
        @RequestBody Map<String, Object> updates) {
    // 部分更新用户
}
```

## 状态码规范

### 2xx 成功
```java
@PostMapping("/users")
public ResponseEntity<UserResponse> createUser(@RequestBody CreateUserRequest request) {
    UserResponse user = userService.createUser(request);
    return ResponseEntity.status(HttpStatus.CREATED).body(user);  // 201 Created
}

@GetMapping("/users/{id}")
public ResponseEntity<UserResponse> getUser(@PathVariable Long id) {
    UserResponse user = userService.getUserById(id);
    return ResponseEntity.ok(user);  // 200 OK
}
```

### 4xx 客户端错误
```java
@GetMapping("/users/{id}")
public ResponseEntity<UserResponse> getUser(@PathVariable Long id) {
    try {
        UserResponse user = userService.getUserById(id);
        return ResponseEntity.ok(user);
    } catch (UserNotFoundException e) {
        return ResponseEntity.notFound().build();  // 404 Not Found
    }
}

@PostMapping("/users")
public ResponseEntity<UserResponse> createUser(@RequestBody CreateUserRequest request) {
    if (!userValidator.validate(request)) {
        return ResponseEntity.badRequest().build();  // 400 Bad Request
    }
    // 处理逻辑
}
```

### 5xx 服务器错误
```java
@ExceptionHandler(Exception.class)
public ResponseEntity<ErrorResponse> handleException(Exception e) {
    log.error("系统异常", e);
    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
        .body(ErrorResponse.builder()
            .code("SYSTEM_ERROR")
            .message("系统内部错误")
            .build());
}
```

## 请求响应格式

### 统一响应格式
```java
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private Integer code;
    private String message;
    private T data;
    private Long timestamp;
    
    public static <T> ApiResponse<T> success(T data) {
        return ApiResponse.<T>builder()
            .code(200)
            .message("成功")
            .data(data)
            .timestamp(System.currentTimeMillis())
            .build();
    }
    
    public static <T> ApiResponse<T> error(Integer code, String message) {
        return ApiResponse.<T>builder()
            .code(code)
            .message(message)
            .timestamp(System.currentTimeMillis())
            .build();
    }
}
```

### 分页响应格式
```java
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class PageResponse<T> {
    private List<T> content;
    private Integer page;
    private Integer size;
    private Long total;
    private Integer totalPages;
    private Boolean hasNext;
    private Boolean hasPrevious;
}

// 使用示例
@GetMapping("/users")
public ResponseEntity<ApiResponse<PageResponse<UserResponse>>> getUsers(
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "20") int size) {
    
    PageResponse<UserResponse> pageResponse = userService.getUsers(page, size);
    return ResponseEntity.ok(ApiResponse.success(pageResponse));
}
```

### 请求头规范
```java
@RestController
public class UserController {
    
    @GetMapping("/users")
    public ResponseEntity<List<UserResponse>> getUsers(
            @RequestHeader(value = "Accept", defaultValue = "application/json") String accept,
            @RequestHeader(value = "Authorization", required = false) String authorization) {
        // 处理请求
    }
}
```

## 错误处理

### 错误码设计
```java
public enum ErrorCode {
    // 通用错误
    SUCCESS(200, "成功"),
    INVALID_PARAMETER(400, "参数错误"),
    UNAUTHORIZED(401, "未授权"),
    FORBIDDEN(403, "禁止访问"),
    NOT_FOUND(404, "资源不存在"),
    INTERNAL_ERROR(500, "系统内部错误"),
    
    // 业务错误
    USER_NOT_FOUND(1001, "用户不存在"),
    USER_ALREADY_EXISTS(1002, "用户已存在"),
    INVALID_CREDENTIALS(1003, "用户名或密码错误");
    
    private final Integer code;
    private final String message;
}
```

### 错误响应格式
```java
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ErrorResponse {
    private Integer code;
    private String message;
    private String details;
    private Long timestamp;
    private String path;
}
```

## 检查清单

### API设计检查
- [ ] URL是否遵循RESTful规范
- [ ] HTTP方法使用是否恰当
- [ ] 状态码使用是否正确
- [ ] 请求响应格式是否统一

### 错误处理检查
- [ ] 错误码设计是否合理
- [ ] 错误信息是否清晰
- [ ] 异常处理是否完善
- [ ] 日志记录是否适当

