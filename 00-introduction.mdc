# Spring Boot Cursor Rules 介绍

> **文件说明**：本文档是 Spring Boot 项目的 Cursor Rules 使用指南，详细介绍了整个规范体系，包括以下内容：
> - 目的与愿景（为什么需要 Cursor Rules、愿景目标）
> - 规范体系结构（代码规范、Spring Boot 规范、API 设计规范、代码质量规范）
> - 核心特性（通用性、模块化、AI 辅助开发、检查清单）
> - 适用项目（Web 应用、API 服务、企业级应用）
> - 使用方法（.cursor/rules 配置、Auto Attached 设置、AI 交互）
> - 最佳实践（团队协作、代码审查、持续改进）
> - 常见问题（FAQ）
> 
> 适合项目新成员快速了解规范体系，也适合团队成员查阅具体的规范内容。

# Spring Boot Cursor Rules 介绍

## 目的与愿景

### 为什么需要 Cursor Rules

在 AI 辅助编程时代，我们需要建立一套标准化的开发规范，确保：

1. **代码一致性**：无论是由 AI 生成还是人工编写的代码，都遵循统一的风格和规范
2. **质量保证**：通过规范化的提示和检查清单，提高 AI 生成代码的质量
3. **团队协作**：为团队成员提供清晰的开发指导，减少代码审查中的争议
4. **知识传承**：将最佳实践固化到规则中，便于新成员快速上手
5. **企业级标准**：基于业界最佳实践，确保代码符合企业级开发要求

### 愿景目标

- 建立业界领先的 AI 辅助开发规范体系
- 提升开发效率和代码质量
- 降低维护成本和 bug 率
- 促进团队技术水平的整体提升
- 实现代码的标准化和自动化管理

## 适用范围

### 适用团队
- **后端开发团队**：主要面向 Spring Boot 项目的 Java 开发团队
- **全栈开发团队**：涉及后端 API 开发的全栈团队
- **架构团队**：负责技术选型和架构设计的团队

### 适用项目
- **企业级应用**：中大型 Spring Boot 微服务项目
- **Web 应用**：基于 Spring Boot 的 Web 应用项目
- **API 服务**：RESTful API 和微服务项目
- **传统企业数字化转型项目**：需要标准化开发流程的项目

### 适用场景
- **新项目开发**：从零开始的项目，可以完全按照规范实施
- **遗留系统改造**：渐进式重构，逐步应用新的开发规范
- **代码审查**：作为代码审查的标准和依据
- **AI 辅助开发**：为 Cursor、GitHub Copilot 等 AI 工具提供上下文

## 使用方式

### 在 Cursor 中加载规则

1. **项目规则**：在项目根目录创建 `.cursor/rules` 目录，将所有规则文件放入其中（推荐方式）
2. **全局规则**：将规则文件复制到用户主目录下的 `.cursor/rules/` 文件夹
3. **团队规则**：在团队共享的代码仓库中维护规则文件
4. **AI 上下文**：开启 Auto Attached 后，Cursor 会自动读取 `.cursor/rules` 目录下的所有规则文件

### 日常使用流程

1. **开发前**：查阅相关规则文件，了解当前模块的开发规范
2. **开发中**：使用提供的代码模板和提示词模板
3. **代码审查**：使用检查清单验证代码质量
4. **问题解决**：查阅 FAQ 和常见问题解答

### 与 AI 交互的最佳实践

```markdown
# 标准提示词模板
你是一个 [角色]，请基于以下上下文生成 [任务描述]：

## 上下文
- 项目：[项目名称] Spring Boot 应用
- 技术栈：Spring Boot 3.x + [ORM框架] + [数据库]
- 架构：分层架构（Controller-Service-DAO）

## 要求
- 遵循项目的命名规范和代码风格
- 包含完整的异常处理和日志记录
- 使用指定的响应格式和错误码体系
- 添加必要的 Swagger 文档注解

## 输出格式
请生成完整的、可运行的代码，包含所有必要的导入和注解。
```

## 维护机制

### 责任分工

- **架构师**：负责整体规范设计和重大决策
- **技术负责人**：负责具体规则的制定和更新
- **资深开发者**：负责最佳实践的总结和模板优化
- **团队全员**：负责使用反馈和问题报告

### 更新流程

1. **需求收集**：通过代码审查、团队讨论、项目总结等方式收集改进建议
2. **规则制定**：技术负责人组织讨论，制定新的规则或修改现有规则
3. **团队评审**：全体团队成员参与评审，确保规则的可行性和合理性
4. **发布更新**：更新规则文件，通知团队，更新相关文档
5. **培训推广**：组织团队培训，确保新规则得到有效执行

### 版本管理

- 使用语义化版本号（如 v1.2.0）
- 维护详细的变更日志
- 标记破坏性变更，提供迁移指南
- 定期回顾和优化规则内容

### 反馈机制

- **问题报告**：通过 Issue 或邮件报告规则使用中的问题
- **改进建议**：定期收集团队对规则的改进建议
- **效果评估**：定期评估规则对开发效率和代码质量的影响

## 规则文件说明

### 文件结构
```
springboot-cursor-rules/
├── 00-introduction.mdc         # 项目介绍（本文件）
├── 01-code-standards.mdc       # 代码规范（复制到 .cursor/rules/）
├── 02-spring-boot-standards.mdc # Spring Boot 规范（复制到 .cursor/rules/）
├── 03-api-design-standards.mdc # API 设计规范（复制到 .cursor/rules/）
├── 04-code-quality-standards.mdc # 代码质量规范（复制到 .cursor/rules/）
├── design-pattern-templates.mdc # 设计模式模板（复制到 .cursor/rules/）
├── code-templates/             # 代码模板库（按标准目录结构组织）
│   └── src/
│       ├── main/java/com/example/user/
│       │   ├── controller/
│       │   │   └── controller-template.java        # 控制器模板
│       │   ├── service/
│       │   │   ├── service-interface-template.java # 服务接口模板
│       │   │   └── impl/
│       │   │       └── service-impl-template.java  # 服务实现模板
│       │   ├── dao/
│       │   │   ├── entity/
│       │   │   │   └── entity-template.java        # 实体类模板
│       │   │   └── mapper/
│       │   │       └── mapper-template.java        # Mapper接口模板（注解模式）
│       │   ├── vo/
│       │   │   ├── request/
│       │   │   │   ├── CommonRequest.java          # 通用请求基类
│       │   │   │   └── request-vo-template.java    # 请求VO模板
│       │   │   └── response/
│       │   │       └── response-vo-template.java   # 响应VO模板
│       │   ├── exception/
│       │   │   ├── GlobalExceptionAdvice.java      # 全局异常处理
│       │   │   └── exception-handler-template.java # 异常处理器模板
│       │   ├── util/
│       │   │   └── util-template.java              # 工具类模板
│       │   └── application-template.java           # 启动类模板
│       ├── main/resources/
│       │   └── application.yml-template.yml        # 配置文件模板
│       └── test/java/
│           └── test-template.java                  # 测试类模板
├── changelog.md                # 版本历史
└── faq.md                      # 常见问题
```

### 阅读顺序建议

1. **新团队成员**：先阅读本文件，然后按顺序阅读 01-04 章节
2. **有经验开发者**：重点关注 02-spring-boot-standards.mdc 和 code-templates/
3. **架构师**：重点关注 02-spring-boot-standards.mdc 和 03-api-design-standards.mdc
4. **前端开发者**：重点关注 03-api-design-standards.mdc
5. **代码质量关注者**：重点关注 04-code-quality-standards.mdc

### 快速参考

- **开发新功能时**：查阅 code-templates/ 中的代码模板
- **代码审查时**：使用 04-code-quality-standards.mdc 中的检查清单
- **遇到问题时**：查阅 faq.md 中的常见问题解答
- **学习最佳实践**：阅读 04-code-quality-standards.mdc 中的性能和安全规范
- **API 设计时**：参考 03-api-design-standards.mdc
- **Spring Boot 开发时**：参考 02-spring-boot-standards.mdc
